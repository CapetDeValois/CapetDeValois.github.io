<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GitHub+Hexo 个人主页教程</title>
    <url>/2023/08/23/GitHub-Hexo-%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一步步对照着教程来配置个人主页实属不易，所以第一篇文章就来整理一下笔者配置个人主页的整个流程，供各位参考。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>一般提到搭建个人博客大家通常会想到<strong>WordPress</strong>。WordPress可以说是全球最流行的网站建设平台了。上至大型网站，下至动态博客，世界上约 30% 的网站都是基于WordPress搭建的。但是，WordPress有一项致命的缺点，那就是<strong>贵</strong>。</p>
<p>那么，有什么平台可以代替WorldPress呢？答案就是 <strong>Hexo+GitHub</strong>。</p>
<p><strong>Hexo+GitHub 与 WorldPress 的优缺点</strong></p>
<ul>
<li><strong>成本</strong><br>WordPress必须要配置一个云服务器或者虚拟主机，其动辄每年两百多元的租费，对于笔者这种学生而言实在是无法承担。而在GitHub上托管静态网站是免费的。除了服务器租费以外，笔者也买不起域名，而在GitHub上托管会”送”一个类似于<strong>xxx.github.io</strong>的二级域名。这样也就拥有了互联网世界的门牌号。</li>
<li><strong>维护</strong><br><strong>WordPress</strong>建立的个人主页属于动态站点，当用户访问量增多时，服务器的负载也会增大，访问速度也会明显下降，用于优化的维护成本较高。<strong>Hexo</strong>建立的主页属于静态站点，通过<code>git</code>命令即可实现文章的发布，维护成本和操作难度较低。</li>
</ul>
<p>因此，笔者最终决定使用<strong>Hexo + GitHub</strong>进行个人主页开发。</p>
<h2 id="Git-与-GitHub"><a href="#Git-与-GitHub" class="headerlink" title="Git 与 GitHub"></a>Git 与 GitHub</h2><p>使用Hexo+GitHub个人主页开发的第一步是准备Git与GitHub。那么为什么第一步要准备Git与GitHub呢？因为需要使用Git向GitHub传输文件，GitHub是托管网站的服务器，Git则是连接服务器的工具。</p>
<p>首先我们需要注册一个GitHub账号。访问<a href="https://github.com/">GitHub官网</a>并注册一个账号。然后我们需要在自己的计算机中安装Git，访问<a href="https://git-scm.com/downloads">Git-下载</a>以获取Git。如果觉得官网的下载速度太慢也可以从笔者自己建的资源分享站<a href="https://onecloud--capetdevalois.repl.co/">小卡佩的垃圾场</a>获取安装包。</p>
<p>完成上述步骤后，已经拥有了Git和GitHub账号了，接下来就要借助<strong>SSH协议</strong>让Git和GitHub连接上。SSH协议全称<strong>Secure Shell</strong>，即 <strong>“安全外壳协议”<strong>。该协议通过数据加密和认证机制实现了设备互联的安全保障，相较于</strong>FTP</strong>、<strong>SFTP</strong>等明文传输协议更具有安全性。</p>
<p>SSH的加密机制是非对称加密，也就是说它会在本地生成两把”钥匙”：一把是<strong>公钥</strong>，需要传到GitHub上；一把是<strong>私钥</strong>，留在自己的电脑上。Git安装后会默认附带SSH，所以可以省去安装SSH的步骤。</p>
<h2 id="绑定-Git-与-GitHub"><a href="#绑定-Git-与-GitHub" class="headerlink" title="绑定 Git 与 GitHub"></a>绑定 Git 与 GitHub</h2><p>随便找个文件夹，右键打开<code>Open Git Bash here</code>，键入伪指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p>该伪指令的作用就是生成这两把钥匙，加密算法采用<strong>RSA</strong>，之后一路敲空格默认即可。这时就可以在<strong>用户文件夹</strong>下的 <strong>.ssh</strong>目录中找到这两把密钥：公钥<code>id_rsa.pub</code>和私钥<code>id_rsa</code>。<br>接下来需要将公钥部署在GitHub上，然后用SSH密钥登录的方式进行连接。<br><strong>第一步</strong> 单击头像，在打开的列表中选择<code>Settings</code>；<br><img src="/2023/08/23/GitHub-Hexo-%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E6%95%99%E7%A8%8B/SSH-1.png" alt="第一步" title="第一步"><br><strong>第二步</strong> 在左侧列表中打开<code>SSH and GPG Keys</code>，并在右侧页面中单击<code>New SSH key</code>按钮；<br><img src="/2023/08/23/GitHub-Hexo-%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E6%95%99%E7%A8%8B/SSH-2.png" alt="第二步" title="第二步"><br><strong>第三步</strong> 在打开的页面中随便输入一个标题，并且把<code>id_rsa.pub</code>中的公钥复制到上面；<br><img src="/2023/08/23/GitHub-Hexo-%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E6%95%99%E7%A8%8B/SSH-3.png" alt="第三步" title="第三步"><br><strong>第四步</strong> 单击<code>Add SSH key</code>，完成。</p>
<h2 id="建库"><a href="#建库" class="headerlink" title="建库"></a>建库</h2><p>到现在这一步，我们已经成功绑定了自己电脑的Git和你的GitHub帐号了。GitHub仓库就是托管你的个人主页的容器，所以首先要把这个容器准备好。<br><strong>第一步</strong> 打开GitHub主页，单击头像，在打开的列表中选择<code>Your repositories</code>；<br><img src="/2023/08/23/GitHub-Hexo-%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E6%95%99%E7%A8%8B/NR-1.png" alt="第一步" title="第一步"><br><strong>第二步</strong> 单击<code>New</code>新建一个仓库；<br><img src="/2023/08/23/GitHub-Hexo-%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E6%95%99%E7%A8%8B/NR-2.png" alt="第二步" title="第二步"><br><strong>第三步</strong> 输入仓库名后点击<code>Create repository</code>按钮(请忽略图中报错，因为笔者已经建了一个同名库了)，完成。<br><img src="/2023/08/23/GitHub-Hexo-%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E6%95%99%E7%A8%8B/NR-3.png" alt="第三步" title="第三步"></p>
<center>仓库命名规则：用户名.github.io</center>

<h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><p>这一部分需要用到<strong>npm</strong>，它是<strong>node</strong>的包管理工具，因此首先要准备好node环境，访问<a href="https://nodejs.org/en/download">下载 | Node.js</a>以获取node，也同样可以访问作者的<a href="https://onecloud--capetdevalois.repl.co/">小卡佩的垃圾场</a>获取安装包。<br>首先在本地新建一个文件夹。这个文件夹以后就是个人网站的项目文件夹，所以一定要自定义好路径。进入该文件夹，右键选择<code>Git Bash here</code>，键入以下伪指令安装<strong>cnpm</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm -registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>再用以下伪指令安装<strong>Hexo</strong>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>安装完成后，键入命令初始化Hexo项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p><img src="/2023/08/23/GitHub-Hexo-%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E6%95%99%E7%A8%8B/init.png" alt="hexo init" title="hexo init"></p>
<center>hexo init</center>

<p>然后键入以下伪指令生成静态网页，在项目根目录中会生成一个<code>/public</code>目录，<code>public</code>目录中就是个人网站文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line"><span class="comment"># 或其缩写形式</span></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<p><img src="/2023/08/23/GitHub-Hexo-%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E6%95%99%E7%A8%8B/g.png" alt="hexo g" title="hexo g"></p>
<center>hexo g</center>
最后我们在本地服务器测试一下网站，键入以下命令开启本地服务器：

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br><span class="line"><span class="comment"># 或其缩写形式</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p><img src="/2023/08/23/GitHub-Hexo-%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E6%95%99%E7%A8%8B/s.png" alt="hexo s" title="hexo s"><br>将上图下方的链接复制到浏览器，就可以看到初始站点，如下图所示：<br><img src="/2023/08/23/GitHub-Hexo-%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E6%95%99%E7%A8%8B/hexo.png" alt="hexo" title="hexo"><br>看完以后就可以用<code>Ctrl + C</code>关闭本地服务器。</p>
<h1 id="NexT主题"><a href="#NexT主题" class="headerlink" title="NexT主题"></a>NexT主题</h1><p>Hexo自带的<strong>Landscape</strong>主题有点丑，需要挑选一款漂亮的主题，笔者推荐使用<strong>NexT</strong>主题。一方面是因为NexT黑白简约的风格便于读者阅读，另一方面是因为NexT社区的活跃人数较多，遇到问题比较方便解决，现在的<strong>v7.8.0</strong>版本拥有许多第三方插件，可以很方便地进行用户交互、页面美化、站点统计、百度推送功能。几乎涵盖了所有动态站点的功能。</p>
<p>打开个人主页项目根目录，右键打开<code>git bash</code>窗口，键入以下命令将NexT下载到本地<code>/themes</code>目录内：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>修改根目录下的站点配置文件<code>_config.yml</code>的<code>Site</code>部分和<code>theme</code>字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">关键词</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">语言(zh-CN)</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">时区(Asia/Shanghai)</span></span><br></pre></td></tr></table></figure>
<p>NexT主题还包含了四种子主题，分别为<strong>Muse</strong>、<strong>Mist</strong>、<strong>Pisces</strong>、<strong>Gemini</strong>，进入路径<code>/theme/next</code>，修改主题配置配置文件<code>_config.yml</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>
<p>将想选择的子主题前的注释去掉，就可以了，可以将每一个都试一试看看效果，挑一个喜欢的就可以了。</p>
<p>设置完成后在根目录下打开<code>git bash</code>，依次键入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="comment">#等价于 hexo cl</span></span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line"><span class="comment">#或者写成一行</span></span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<p>便可以在本地服务器中启动个人主页，在浏览器中输入网址：<a href="https://localhost:4000/">https://localhost:4000</a>，检查一下你的网页。</p>
<h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><p>网站设施已经准备完毕了，但是网页上只显示了<code>Hello world</code>这篇文章，进入<code>/source/_posts</code>文件夹，可以看到<code>hello-world.md</code>，这个路径就是主页文章的保存路径。<br>如果想要写文章，先进入<code>/scaffolds</code>目录，打开<code>post.md</code>，将其替换为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> &#123;&#123; <span class="string">title</span> &#125;&#125;</span><br><span class="line"><span class="attr">date:</span> &#123;&#123; <span class="string">date</span> &#125;&#125;</span><br><span class="line"><span class="attr">categories:</span> <span class="comment">#分类</span></span><br><span class="line"><span class="attr">tags:</span> <span class="comment">#标签</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment">#关键词</span></span><br><span class="line"><span class="attr">description:</span> <span class="comment">#描述</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>这个<code>post.md</code>文件就是文章母版，如果想要做什么统一的配置，都可以在母版进行编辑。<br>在<code>git bash</code>键入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post <span class="string">&quot;标题&quot;</span></span><br><span class="line"><span class="comment">#&quot;post&quot; 可省略</span></span><br></pre></td></tr></table></figure>
<p>这条命令就是用来初始化一篇文章的。这样就可以在<code>/sources/_post</code>目录中找到<code>标题.md</code>了。写完后，用<code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</code>命令重新生成网页文件，再打开<a href="https://localhost:4000/">https://localhost:4000</a>，就可以看到自己的文章了。</p>
<h1 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h1><p>现在需要把本地生成的网页文件部署到远程仓库上，这样其他人就可以访问个人主页了。</p>
<p>首先，键入以下命令安装部署插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>安装完成后，我们进入站点配置文件<code>/_config.yml</code>，修改<code>deploy</code>字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">你自己的仓库名</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>配置好后在终端输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br><span class="line"><span class="comment">#或其缩写形式</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>即可一键部署至GitHub。如果在此步骤报错，应该是没设置<code>git config --global user.email | user.name</code>，在终端中键入以下命令，重新<code>hexo d</code>一下就可以啦：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;GitHub邮箱&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;GitHub用户名&quot;</span></span><br></pre></td></tr></table></figure>
<p>稍等片刻，在浏览器输入<code>https://用户名.github.io</code>即可访问个人网页啦。<br>此时，个人网页已经被部署到GitHub上，在别的设备上输入这个网址也可以访问到这个网站。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>如果被这篇文章帮助到了，就请关注收藏一下笔者的<a href="https://capetdevalois.github.io/">个人主页</a>吧~<br>笔者的资源网站<a href="https://onecloud--capetdevalois.repl.co/">小卡佩的垃圾场</a>也欢迎各位下载、使用上面的资源哦~<br><strong>笔者邮箱：<a href="mailto:2703998852@qq.com">2703998852@qq.com</a></strong><br>如果有什么建议或者疑问，就请给笔者写电子邮件哦~</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
