<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>稗田阿柔</title>
  
  <subtitle>阿柔的小图书馆</subtitle>
  <link href="https://hiedanoajuu.github.io/atom.xml" rel="self"/>
  
  <link href="https://hiedanoajuu.github.io/"/>
  <updated>2025-02-09T09:11:30.946Z</updated>
  <id>https://hiedanoajuu.github.io/</id>
  
  <author>
    <name>稗田阿柔</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>QEMU MS-DOS环境配置</title>
    <link href="https://hiedanoajuu.github.io/2025/02/09/qemu-ms-dos/"/>
    <id>https://hiedanoajuu.github.io/2025/02/09/qemu-ms-dos/</id>
    <published>2025-02-09T06:44:34.000Z</published>
    <updated>2025-02-09T09:11:30.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>也是学到了Masm中运用<code>int 13h</code>对软盘进行读写这一部分了。不过，DOSBox虽然支持挂载虚拟软驱，但并不支持软盘启动。对此，还是决定把Masm开发环境迁移到<strong>QEMU</strong>虚拟机上。</p><h1 id="安装QEMU"><a href="#安装QEMU" class="headerlink" title="安装QEMU"></a>安装QEMU</h1><p>在笔者使用的Arch Linux上使用<code>pacman</code>安装<code>qemu</code>尤为方便，只需要:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S qemu-full</span><br></pre></td></tr></table></figure></p><p>接下来，我们为虚拟机创建一个硬盘镜像，<code>500MB</code>的应该就足够了:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create -f qcow2 /path/to/c.img 500M</span><br><span class="line"><span class="comment"># /path/to/* 替换成自己的路径，下同</span></span><br></pre></td></tr></table></figure></p><p>随后，到这个这个网站<a href="https://winworldpc.com/product/ms-dos/50">https://winworldpc.com/product/ms-dos/50</a>下载MS-DOS 5.0的镜像，这里我选择的是单软盘的版本。</p><p>用QEMU载入前面创建的硬盘镜像和下载的软盘镜像:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-i386 -m 32M -hda c.img -fda ms-dos-floppy.img -boot a</span><br></pre></td></tr></table></figure><br>这里我们指定内存为<code>32MB</code>，前面创建的硬盘镜像<code>c.img</code>为C盘，下载的MS-DOS软盘镜像<code>ms-dos-floppy.img</code>为A盘，并以A盘作为启动盘，各参数可以根据实际自行调整。</p><p><img src="dos-floppy.png" alt="MS-DOS安装" title="MS-DOS安装"><br>于是我们就进入了安装MS-DOS的界面了，过程没什么好说的，提供的英文指示也非常通俗易懂。</p><p><img src="dos-shell.png" alt="MS-DOS Shell" title="MS-DOS Shell"><br>安装完成后重启，如果进入了这个<code>MS-DOS Shell</code>就说明安装成功了。</p><h1 id="配置开发环境"><a href="#配置开发环境" class="headerlink" title="配置开发环境"></a>配置开发环境</h1><p>首先这个<code>MS-DOS Shell</code>没什么大用。先退出，然后到根目录下的自启动脚本<code>autoexec.bat</code>把它拿掉即可。<br>接下来，我们把Masm的开发环境全部迁移过来。<br>先回到<code>DOSBox</code>，在其中新建一个<code>a.img</code>的软盘镜像:<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imgmake a.img -t floppy</span><br></pre></td></tr></table></figure><br>接着，挂载这个镜像到A盘:<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imgmount A a.img -t floppy</span><br></pre></td></tr></table></figure><br>随后把开发环境的文件全都<code>copy</code>到A盘。<br>然后启动QEMU，并把<code>a.img</code>挂载为QEMU的A盘:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-i386 -m 32M -hda c.img -fda a.img -boot c</span><br></pre></td></tr></table></figure><br>再把A盘里的文件<code>copy</code>到C盘，并在<code>autoexec.bat</code>配置一下环境变量，即可。</p><h1 id="DOSBox"><a href="#DOSBox" class="headerlink" title="DOSBox"></a>DOSBox</h1><p>至此，我们已经正式完成了开发环境由DOSBox到QEMU的转移。不过，也没必要把物理机上的DOSBox删掉。我们可以利用DOSBox在物理机上读写<code>a.img</code>，从而实现物理机与QEMU虚拟机的交互与文件传递。具体的操作上面也已经演示过了，不再赘述。</p>]]></content>
    
    
    <summary type="html">QEMU MS-DOS系统安装及Masm开发环境配置</summary>
    
    
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="汇编语言" scheme="https://hiedanoajuu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Masm" scheme="https://hiedanoajuu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/Masm/"/>
    
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="折腾" scheme="https://hiedanoajuu.github.io/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>编写int 9中断例程</title>
    <link href="https://hiedanoajuu.github.io/2025/02/04/int9/"/>
    <id>https://hiedanoajuu.github.io/2025/02/04/int9/</id>
    <published>2025-02-04T00:53:48.000Z</published>
    <updated>2025-02-04T04:08:04.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目情景"><a href="#项目情景" class="headerlink" title="项目情景"></a>项目情景</h1><p>安装一个新的int 9中断例程，功能:在DOS下，按下“A”键后，除非不再松开，如果松开，就显示满屏幕的“A”，其他的键照常处理。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>题目的要求如下：</p><ul><li>释放“A”键，显示满屏幕的“A”；</li><li>正常处理其他的键；<br>有个很奇怪的点是，对于按下“A”键后“A”需不需要正常处理，原题的说明并不清楚。<br>在这里，我认为“A”并不属于“其他的键”的范畴，因此不需要正常处理，也不需要让DOS将其输出在屏幕上。</li></ul><p>下面的程序中，我们要在内存中写入新的<code>int 9</code>中断例程，为了防止<code>int 9</code>中断例程被操作系统和其他应用程序改写和覆盖，我们可以将其写入中断向量表的空白部分，也即<code>0:200</code>-<code>0:2FF</code>。同时，我们需要在程序中预留开头的<strong>2个字</strong>来保存原来的<code>int 9</code>例程的地址，以便调用BIOS提供的<code>int 9</code>对输入进行正常处理。</p><p>并且，我们需要改写中断向量表中<code>int 9</code>所指向的中断例程位置，将保存<code>int 9</code>例程位置的<code>0:(4*9)</code>和<code>0:(4*9+2)</code>两个字中存储的地址存入<code>0:200</code>和<code>0:202</code>两个字，并将原位置的地址改写为新的<code>int 9</code>中断例程的地址:<code>0:204</code>。</p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h1><h2 id="int-9中断例程"><a href="#int-9中断例程" class="headerlink" title="int 9中断例程"></a>int 9中断例程</h2><p>先来编写本程序的核心，<code>int 9</code>中断例程：</p><p>首先判断按下的是否是<code>A</code>键，如果是<code>A</code>键，进行循环判断，直到另一个键被按下(或者<code>A</code>键被松开)触发新的中断例程，跳出循环：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int9:</span><br><span class="line">check:</span><br><span class="line">    in al,60h</span><br><span class="line">cmp al,1eh ; 按下&quot;A&quot;键</span><br><span class="line">je check ; 不处理</span><br></pre></td></tr></table></figure><br>(感觉这里的处理方式非常危险，但除此以外并没有更好的方法)</p><p>调用<code>BIOS</code>提供的<code>int 9</code>例程，对其他键进行正常处理:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pushf</span><br><span class="line">call dword ptr cs:[200h] ; CS=0,0:200为先前的int 9例程位置的保存处</span><br><span class="line">; 调用先前的int 9例程</span><br></pre></td></tr></table></figure></p><p>判断是否是<code>A</code>键被松开，如果不是，跳过下面显示满屏幕的<code>A</code>的程序，直接返回:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cmp al,9eh ; 释放&quot;A&quot;</span><br><span class="line">jne int9_iret</span><br><span class="line">......</span><br><span class="line">int9_iret:</span><br><span class="line">    ......</span><br><span class="line">    iret</span><br></pre></td></tr></table></figure></p><p>如果是，显示满屏幕的“A”，再返回:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cmp al,9eh ; 释放&quot;A&quot;</span><br><span class="line">jne int9_iret</span><br><span class="line"></span><br><span class="line">; 打印&quot;A&quot;</span><br><span class="line">mov cx,2000</span><br><span class="line">mov ax,0b800h</span><br><span class="line">mov es,ax</span><br><span class="line">mov bx,0</span><br><span class="line">s0:</span><br><span class="line">    mov byte ptr es:[bx],41h</span><br><span class="line">    add bx,2</span><br><span class="line">loop s0</span><br><span class="line"></span><br><span class="line">int9_iret:</span><br><span class="line">    ......</span><br><span class="line">    iret</span><br></pre></td></tr></table></figure><br>保存在例程中需要被改写的寄存器的值:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int9:</span><br><span class="line">    push ax</span><br><span class="line">    push bx</span><br><span class="line">    push cx</span><br><span class="line">    push es</span><br><span class="line">    ......</span><br><span class="line">int9_iret:</span><br><span class="line">    pop es</span><br><span class="line">    pop cx</span><br><span class="line">    pop bx</span><br><span class="line">    pop ax</span><br><span class="line">    iret</span><br></pre></td></tr></table></figure><br>定义一个<code>int9_end</code>占位标号，便于在安装时计算<code>int 9</code>例程的长度:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int9_end:</span><br><span class="line">    nop</span><br></pre></td></tr></table></figure></p><h2 id="安装程序"><a href="#安装程序" class="headerlink" title="安装程序"></a>安装程序</h2><p>指定段寄存器:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ss:stack</span><br></pre></td></tr></table></figure><br>定义栈段<code>stack</code>，用于保存寄存器的值:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stack segment</span><br><span class="line">    db 128 dup (0)</span><br><span class="line">stack ends</span><br></pre></td></tr></table></figure><br>定义代码段<code>code</code>，用于存放安装程序和<code>int 9</code>例程:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">code segment</span><br><span class="line">......</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>初始化栈:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax,stack</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,128</span><br></pre></td></tr></table></figure><br>利用串传输指令<code>movsb</code>安装<code>int 9</code>例程，<code>ds:si</code>指向起始位置，<code>es:di</code>指向终点，<code>cx</code>存放长度，<code>cld</code>指定方向为正:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mov ax,cs</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,0</span><br><span class="line">mov es,ax</span><br><span class="line"></span><br><span class="line">mov si,offset int9</span><br><span class="line">mov di,204h</span><br><span class="line">mov cx,offset int9_end - offset int9 ; Length of int9</span><br><span class="line">cld</span><br><span class="line">rep movsb</span><br></pre></td></tr></table></figure><br>将原先的<code>int 9</code>中断例程位置保存在<code>0:200</code>和<code>0:202</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov ax,es:[9*4]</span><br><span class="line">mov es:[200h],ax</span><br><span class="line">mov ax,es:[9*4+2]</span><br><span class="line">mov es:[202h],ax</span><br></pre></td></tr></table></figure><br>将新<code>int 9</code>的地址写入中断向量表，同时用<code>cli</code>和<code>sti</code>防止在改写中断向量表时触发中断:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cli</span><br><span class="line">mov word ptr es:[9*4],204h</span><br><span class="line">mov word ptr es:[9*4+2],0</span><br><span class="line">sti</span><br></pre></td></tr></table></figure><br>完成安装，最后返回:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure><br>完整的程序如下:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ss:stack</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">    db 128 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">        ; Stack init</span><br><span class="line">        mov ax,stack</span><br><span class="line">        mov ss,ax</span><br><span class="line">        mov sp,128</span><br><span class="line"></span><br><span class="line">        ; Install new int9</span><br><span class="line">        mov ax,cs</span><br><span class="line">        mov ds,ax</span><br><span class="line">        mov ax,0</span><br><span class="line">        mov es,ax</span><br><span class="line"></span><br><span class="line">        mov si,offset int9</span><br><span class="line">        mov di,204h</span><br><span class="line">        mov cx,offset int9_end - offset int9 ; Length of int9</span><br><span class="line">        cld</span><br><span class="line">        rep movsb</span><br><span class="line"></span><br><span class="line">        ; Save the address of former int9</span><br><span class="line">        mov ax,es:[9*4]</span><br><span class="line">        mov es:[200h],ax</span><br><span class="line">        mov ax,es:[9*4+2]</span><br><span class="line">        mov es:[202h],ax</span><br><span class="line"></span><br><span class="line">        ; Write IVT</span><br><span class="line">        cli</span><br><span class="line">        mov word ptr es:[9*4],204h</span><br><span class="line">        mov word ptr es:[9*4+2],0</span><br><span class="line">        sti</span><br><span class="line"></span><br><span class="line">; Terminate</span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21h</span><br><span class="line"></span><br><span class="line">    ; New int9</span><br><span class="line">    int9:</span><br><span class="line">        push ax</span><br><span class="line">        push bx</span><br><span class="line">        push cx</span><br><span class="line">        push es</span><br><span class="line"></span><br><span class="line">check:</span><br><span class="line">    in al,60h</span><br><span class="line">cmp al,1eh ; Press &quot;A&quot;</span><br><span class="line">je check ; Not to treat</span><br><span class="line"></span><br><span class="line">        pushf</span><br><span class="line">        call dword ptr cs:[200h]</span><br><span class="line">        ; Call former int_9</span><br><span class="line"></span><br><span class="line">        cmp al,9eh ; Release &quot;A&quot;</span><br><span class="line">        jne int9_iret</span><br><span class="line"></span><br><span class="line">; Print &quot;A&quot;</span><br><span class="line">        mov cx,2000</span><br><span class="line">        mov ax,0b800h</span><br><span class="line">        mov es,ax</span><br><span class="line">        mov bx,0</span><br><span class="line">        s0:</span><br><span class="line">            mov byte ptr es:[bx],41h</span><br><span class="line">            add bx,2</span><br><span class="line">        loop s0</span><br><span class="line">        int9_iret:</span><br><span class="line">            pop es</span><br><span class="line">            pop cx</span><br><span class="line">            pop bx</span><br><span class="line">            pop ax</span><br><span class="line">            iret</span><br><span class="line">        int9_end:</span><br><span class="line">            nop</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>有点抽象，但考虑到题目的要求本来就不太清晰……</p><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>编译、链接，生成<code>int9.exe</code>:<br><img src="assemble.png" alt="编译"><br>运行结果如视频所示:</p><iframe src="show.mp4"></iframe><p>可以看到，实现了我们预想的功能。<br><strong>项目完成</strong></p>]]></content>
    
    
    <summary type="html">题目要求好奇怪啊（</summary>
    
    
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="汇编语言" scheme="https://hiedanoajuu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Masm" scheme="https://hiedanoajuu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/Masm/"/>
    
    
    <category term="内存" scheme="https://hiedanoajuu.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="高危" scheme="https://hiedanoajuu.github.io/tags/%E9%AB%98%E5%8D%B1/"/>
    
  </entry>
  
  <entry>
    <title>访问CMOS中的系统时间</title>
    <link href="https://hiedanoajuu.github.io/2025/02/01/time-exe/"/>
    <id>https://hiedanoajuu.github.io/2025/02/01/time-exe/</id>
    <published>2025-02-01T05:27:59.000Z</published>
    <updated>2025-02-07T09:19:29.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目情景"><a href="#项目情景" class="headerlink" title="项目情景"></a>项目情景</h1><p>编程，以“年/月/日 时:分:秒”的格式，显示当前的日期、时间。</p><p>注意：CMOS RAM中存储着系统的配置信息，除了保存时间信息的单元外，不要向其他的单元中写入内容，否则将引起一些系统错误。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>在Linux系统上对应的命令<code>date</code>的效果如图所示:<br><img src="date.png" alt="date" title="date"><br>而我们需要实现的就是和上图差不多的效果。</p><p>PC机中存在一个被称为<strong>CMOS RAM</strong>(下简称CMOS)的部件，包含一个实时钟与一个128字节的RAM，我们所需要的系统时间就存储在其中。CMOS有两个端口，端口地址为<code>70h</code>和<code>71h</code>。CPU通过这两个端口读写CMOS。<br><code>70h</code>是地址端口，<code>71h</code>是数据端口。CPU需要先将需要进行读写操作的CMOS单元地址送入<code>70h</code>，再对<code>71h</code>端口进行读写。<br>在CMOS中存放着<strong>年</strong>、<strong>月</strong>、<strong>日</strong>、<strong>时</strong>、<strong>分</strong>、<strong>秒</strong>的时间信息，长度都为1字节，存放的单元依次为:<br>秒:0    分:2    时:4    日:7    月:8    年:9<br>可以将其分为两组，一组<strong>年月日</strong>步长为<strong>1</strong>，一组<strong>时分秒</strong>步长为<strong>2</strong>。</p><p>时间信息以<strong>BCD码</strong>形式存放，即将各位数字分别以二进制形式保存。1字节可保存两位，高4位保存十位，低4位保存个位，显示时需要将二者分离。</p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h1><p>指定各段的段寄存器:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:text,ss:stack</span><br></pre></td></tr></table></figure><br>定义数据段<code>text</code>，用于存放需要打印的格式化时间字符串:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text segment</span><br><span class="line">    db &quot;yy/mm/dd hh:mm:ss&quot;,&quot;$&quot;</span><br><span class="line">    ; 格式化:年/月/日 时:分:秒</span><br><span class="line">text ends</span><br></pre></td></tr></table></figure><br>定义栈段<code>stack</code>，用于暂存寄存器:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stack segment</span><br><span class="line">    db 16 dup (0)</span><br><span class="line">stack ends</span><br></pre></td></tr></table></figure><br>定义代码段<code>code</code>和程序起始点<code>start</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">......</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>初始化段寄存器，<code>ds</code>指向<code>text</code>段:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,text</span><br><span class="line">mov ds,ax</span><br></pre></td></tr></table></figure><br>清屏:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0b800h</span><br><span class="line">mov es,ax</span><br><span class="line">mov si,0</span><br><span class="line">mov cx,2000</span><br><span class="line">s2:</span><br><span class="line">    mov word ptr es:[si],0720h</span><br><span class="line">    add si,2</span><br><span class="line">loop s2</span><br></pre></td></tr></table></figure><br>接下来定义子程序<code>read_cmos</code>，读取CMOS的指定单元(<code>al</code>存放)，转化为字符串，并写入<code>text</code>段指定地址(<code>bx</code>给出):<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">read_cmos:</span><br><span class="line">        ; 名称:read_cmos</span><br><span class="line">        ; 功能:读取CMOS RAM指定单元</span><br><span class="line">        ; 参数:(al)-&gt;地址(CMOS)</span><br><span class="line">        ; 返回:ds:bx(in)</span><br><span class="line">        push cx</span><br><span class="line">        push ax</span><br><span class="line"></span><br><span class="line">        ; 读取CMOS</span><br><span class="line">        out 70h,al</span><br><span class="line">        in al,71h</span><br><span class="line"></span><br><span class="line">        ; 分离个位与十位</span><br><span class="line">        mov ah,al</span><br><span class="line">        mov cl,4</span><br><span class="line">        shr ah,cl</span><br><span class="line">        and al,00001111b</span><br><span class="line"></span><br><span class="line">        ; BCD -&gt; Ascii</span><br><span class="line">        add ah,30h</span><br><span class="line">        add al,30h</span><br><span class="line">        </span><br><span class="line">        ; 写入</span><br><span class="line">        mov ds:[bx],ah</span><br><span class="line">        mov ds:[bx+1],al</span><br><span class="line"></span><br><span class="line">        pop ax</span><br><span class="line">        pop cx</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure><br>调用<code>read_cmos</code>子程序，分两组<strong>年月日</strong>和<strong>时分秒</strong>写入:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">; 年月日</span><br><span class="line">mov al,9</span><br><span class="line">mov cx,3</span><br><span class="line">mov bx,0</span><br><span class="line">s0:</span><br><span class="line">    call read_cmos</span><br><span class="line">    add bx,3</span><br><span class="line">    dec al ; 年:9,月:8,日:7</span><br><span class="line">loop s0</span><br><span class="line"></span><br><span class="line">; 时分秒</span><br><span class="line">mov al,4</span><br><span class="line">mov cx,3</span><br><span class="line">mov bx,9</span><br><span class="line">s1:</span><br><span class="line">    call read_cmos</span><br><span class="line">    add bx,3</span><br><span class="line">    sub al,2 ; 时:4,分:2,秒:0</span><br><span class="line">loop s1</span><br></pre></td></tr></table></figure><br>利用<code>int 10h</code>和<code>int 21h</code>提供的中断例程打印字符串:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mov ah,2   ; 设置光标</span><br><span class="line">mov bh,0   ; 页</span><br><span class="line">mov dh,12  ; 行</span><br><span class="line">mov dl,20h ; 列</span><br><span class="line">int 10h</span><br><span class="line"></span><br><span class="line">mov ah,9   ; 打印</span><br><span class="line">mov dx,0   ; 文本地址</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure><br>将光标设置在最后一行，显示提示符:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov ah,2   ; 设置光标</span><br><span class="line">mov bh,0   ; 页</span><br><span class="line">mov dh,24  ; 行</span><br><span class="line">mov dl,0   ; 列</span><br><span class="line">int 10h</span><br></pre></td></tr></table></figure><br>最后返回:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure></p><p>完整的程序如下:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:text,ss:stack</span><br><span class="line"></span><br><span class="line">text segment</span><br><span class="line">    db &quot;yy/mm/dd hh:mm:ss&quot;,&quot;$&quot;</span><br><span class="line">    ; Format</span><br><span class="line">text ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">    db 16 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">        mov ax,text</span><br><span class="line">        mov ds,ax</span><br><span class="line"></span><br><span class="line">        ; Clear</span><br><span class="line">        mov ax,0b800h</span><br><span class="line">        mov es,ax</span><br><span class="line">        mov si,0</span><br><span class="line">        mov cx,2000</span><br><span class="line">        s2:</span><br><span class="line">            mov word ptr es:[si],0720h</span><br><span class="line">            add si,2</span><br><span class="line">        loop s2</span><br><span class="line"></span><br><span class="line">        mov al,9</span><br><span class="line">        mov cx,3</span><br><span class="line">        mov bx,0</span><br><span class="line">        s0:</span><br><span class="line">            call read_cmos</span><br><span class="line">            add bx,3</span><br><span class="line">            dec al ; y:9,m:8,d:7</span><br><span class="line">        loop s0</span><br><span class="line"></span><br><span class="line">        mov al,4</span><br><span class="line">        mov cx,3</span><br><span class="line">        mov bx,9</span><br><span class="line">        s1:</span><br><span class="line">            call read_cmos</span><br><span class="line">            add bx,3</span><br><span class="line">            sub al,2 ; h:4,m:2,s:0</span><br><span class="line">        loop s1</span><br><span class="line"></span><br><span class="line">        mov ah,2   ; Set Cursor</span><br><span class="line">        mov bh,0   ; Page</span><br><span class="line">        mov dh,12  ; Line</span><br><span class="line">        mov dl,20h ; Column</span><br><span class="line">        int 10h</span><br><span class="line"></span><br><span class="line">        mov ah,9   ; Print</span><br><span class="line">        mov dx,0   ; text</span><br><span class="line">        int 21h</span><br><span class="line"></span><br><span class="line">        mov ah,2   ; Set Cursor</span><br><span class="line">        mov bh,0   ; Page</span><br><span class="line">        mov dh,24  ; Line</span><br><span class="line">        mov dl,0   ; Column</span><br><span class="line">        int 10h</span><br><span class="line"></span><br><span class="line">        ; Terminate</span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21h</span><br><span class="line"></span><br><span class="line">        read_cmos:</span><br><span class="line">            ; Name:read_cmos</span><br><span class="line">            ; Function:Read designated byte of CMOS RAM</span><br><span class="line">            ; Parameter:(al)-&gt;address(CMOS)</span><br><span class="line">            ; Return:ds:bx(in)</span><br><span class="line">            push cx</span><br><span class="line">            push ax</span><br><span class="line"></span><br><span class="line">            ; Read CMOS</span><br><span class="line">            out 70h,al</span><br><span class="line">            in al,71h</span><br><span class="line"></span><br><span class="line">            ; Isolate</span><br><span class="line">            mov ah,al</span><br><span class="line">            mov cl,4</span><br><span class="line">            shr ah,cl</span><br><span class="line">            and al,00001111b</span><br><span class="line"></span><br><span class="line">            ; BCD -&gt; Ascii</span><br><span class="line">            add ah,30h</span><br><span class="line">            add al,30h</span><br><span class="line"></span><br><span class="line">            mov ds:[bx],ah</span><br><span class="line">            mov ds:[bx+1],al</span><br><span class="line"></span><br><span class="line">            pop ax</span><br><span class="line">            pop cx</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>体量不大，逻辑也还是很清晰的。</p><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>编译、链接，生成<code>time.exe</code>:<br><img src="assemble.png" alt="编译" title="编译"><br>运行结果如图所示:<br><img src="time.png" alt="运行结果" title="运行结果"><br>可以看到，完美地实现了我们预想的功能，已经达到了系统工具级水准(<br><strong>项目完成</strong></p>]]></content>
    
    
    <summary type="html">达到了系统工具级水准(</summary>
    
    
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="汇编语言" scheme="https://hiedanoajuu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Masm" scheme="https://hiedanoajuu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/Masm/"/>
    
    
    <category term="内存" scheme="https://hiedanoajuu.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
    <category term="汇编语言" scheme="https://hiedanoajuu.github.io/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="显存" scheme="https://hiedanoajuu.github.io/tags/%E6%98%BE%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>课程设计1 显示Power idea公司的数据</title>
    <link href="https://hiedanoajuu.github.io/2025/01/25/power-idea/"/>
    <id>https://hiedanoajuu.github.io/2025/01/25/power-idea/</id>
    <published>2025-01-25T06:03:15.000Z</published>
    <updated>2025-01-25T08:18:15.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目情景"><a href="#项目情景" class="headerlink" title="项目情景"></a>项目情景</h1><p>任务：将实验7中的Power idea公司的数据按照下图所示的格式在屏幕上显示出来。<br><img src="demo.jpg" alt="效果" title="效果"></p><center>Power idea公司的数据</center><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>需要用到<a href="https://hiedanoajuu.github.io/2025/01/19/expt-7">实验7</a>的数据，为了偷懒就直接在实验7的<code>source.asm</code>的基础上写了。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">; source.asm</span><br><span class="line">assume cs:codesg</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#x27;1975&#x27;,&#x27;1976&#x27;,&#x27;1977&#x27;,&#x27;1978&#x27;,&#x27;1979&#x27;,&#x27;1980&#x27;,&#x27;1981&#x27;,&#x27;1982&#x27;,&#x27;1983&#x27;</span><br><span class="line">    db &#x27;1984&#x27;,&#x27;1985&#x27;,&#x27;1986&#x27;,&#x27;1987&#x27;,&#x27;1988&#x27;,&#x27;1989&#x27;,&#x27;1990&#x27;,&#x27;1991&#x27;,&#x27;1992&#x27;</span><br><span class="line">    db &#x27;1993&#x27;,&#x27;1994&#x27;,&#x27;1995&#x27;</span><br><span class="line">    ;以上是表示21年的21个字符串</span><br><span class="line"></span><br><span class="line">    dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514</span><br><span class="line">    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000</span><br><span class="line">    ;以上是表示21年公司收入的21个dword型数据</span><br><span class="line"></span><br><span class="line">    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226</span><br><span class="line">    dw 11542,14430,15257,17800</span><br><span class="line">    ;以上是表示21年公司雇员人数的21个word型数据</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">table segment</span><br><span class="line">    db 21 dup (&#x27;year summ ne ?? &#x27;)</span><br><span class="line">table ends</span><br></pre></td></tr></table></figure><br>将实验7里的<code>table</code>段改为<code>text</code>段，用于存储需要打印的字符串。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text segment</span><br><span class="line">    db 160 dup (0)</span><br><span class="line">    ; 160字节的超大text段</span><br><span class="line">text ends</span><br></pre></td></tr></table></figure><br>可以按照<strong>年份</strong>、<strong>收入</strong>、<strong>雇员</strong>、<strong>人均收入</strong>的顺序依次处理不同类型的数据，并分四次打印到屏幕上，效率比较高。<br>在<code>text</code>段中存储时，可以定义以<code>0</code>结尾，以<code>0ah</code>(即<code>LF</code>)为换行符，便于在打印时对字符串进行操作。</p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h1><h2 id="printf子程序"><a href="#printf子程序" class="headerlink" title="printf子程序"></a>printf子程序</h2><p>在程序中需要实现在屏幕上打印字符串的功能，可以用<code>printf</code>子程序实现:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">printf:</span><br><span class="line">    ; 名称:printf</span><br><span class="line">    ; 功能:在屏幕指定位置打印字符串,0A解释为\n,以0结尾</span><br><span class="line">    ; 参数:text段存储需要打印的字符串</span><br><span class="line">    ;     (si)存储位置</span><br><span class="line">    push di</span><br><span class="line">    push cx</span><br><span class="line">    push es</span><br><span class="line">    push ds</span><br><span class="line">    push si</span><br><span class="line">    push si</span><br><span class="line">    ; 保护寄存器内容，下各子程序同</span><br><span class="line">    </span><br><span class="line">    mov di,0</span><br><span class="line">    mov cx,text</span><br><span class="line">    mov ds,cx</span><br><span class="line">    mov cx,0b800h</span><br><span class="line">    mov es,cx</span><br><span class="line">    s0:</span><br><span class="line">        mov ch,0</span><br><span class="line">        mov cl,ds:[di]</span><br><span class="line">        jcxz printf_cmpd ; 0标志结束</span><br><span class="line">        sub cx,0ah</span><br><span class="line">        jcxz lineFeed ; LF标志换行</span><br><span class="line">        add cx,0ah</span><br><span class="line">        mov ch,7h ; 白底黑字</span><br><span class="line">        mov es:[si],cx</span><br><span class="line">        add si,2</span><br><span class="line">        s1:</span><br><span class="line">            add di,1</span><br><span class="line">            jmp short s0</span><br><span class="line">        lineFeed:</span><br><span class="line">            ; 换行</span><br><span class="line">            pop si</span><br><span class="line">            add si,0a0h</span><br><span class="line">            push si</span><br><span class="line">            jmp short s1</span><br><span class="line">    printf_cmpd:</span><br><span class="line">        pop si</span><br><span class="line">        pop si</span><br><span class="line">        pop ds</span><br><span class="line">        pop es</span><br><span class="line">        pop cx</span><br><span class="line">        pop di</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure></p><h2 id="wtoc子程序"><a href="#wtoc子程序" class="headerlink" title="wtoc子程序"></a>wtoc子程序</h2><p>需要将word类型的数据(雇员人数、人均收入)转化为字符串，可以用<code>wtoc</code>子程序实现:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">wtoc:</span><br><span class="line">        ; 名称:wtoc</span><br><span class="line">        ; 功能:数据(word) -&gt; 字符</span><br><span class="line">        ; 参数: (ax)=数据</span><br><span class="line">        ; ds:si -&gt; 字符串的开始地址</span><br><span class="line">        ; si(输出) -&gt; 字符串的结束地址</span><br><span class="line">        push ax</span><br><span class="line">        push bx</span><br><span class="line">        push cx</span><br><span class="line">        push dx</span><br><span class="line">        push di</span><br><span class="line"></span><br><span class="line">        mov di,0</span><br><span class="line">        divide_w:</span><br><span class="line">            mov dx,0</span><br><span class="line">            mov bx,10</span><br><span class="line">            div bx</span><br><span class="line">            ; 原理:通过反复除以10得到各位的数字，再+30h得到对应的ASCII编码，后面的dtoc同</span><br><span class="line">            add dx,30h</span><br><span class="line">            mov dh,0</span><br><span class="line">            push dx</span><br><span class="line">            inc di</span><br><span class="line">            mov cx,ax</span><br><span class="line">            jcxz wtoc_cmpd ; 商为0跳出循环</span><br><span class="line">            jmp short divide_w</span><br><span class="line">        wtoc_cmpd:</span><br><span class="line">            ; 将上述步骤得到的字符倒序排列</span><br><span class="line">            mov cx,di</span><br><span class="line">            s7:</span><br><span class="line">                pop ax</span><br><span class="line">                mov es:[si],al</span><br><span class="line">                inc si</span><br><span class="line">            loop s7</span><br><span class="line">            mov byte ptr es:[si],0ah</span><br><span class="line">            ; 结尾加上LF</span><br><span class="line">            inc si</span><br><span class="line"></span><br><span class="line">            pop di</span><br><span class="line">            pop dx</span><br><span class="line">            pop cx</span><br><span class="line">            pop bx</span><br><span class="line">            pop ax</span><br><span class="line">            ret</span><br></pre></td></tr></table></figure></p><h2 id="divdw子程序"><a href="#divdw子程序" class="headerlink" title="divdw子程序"></a>divdw子程序</h2><p>dword类型的数据(收入)也需要一个类似于<code>wtoc</code>的子程序，但是dword数据在进行<code>div</code>时容易溢出，所以编写一个不会溢出的除法子程序。<br>原理公式如下:</p><script type="math/tex; mode=display">X \in [0,FFFFFFFF];X=H \cdot 65536+L;H,L \in [0,FFFF]</script><script type="math/tex; mode=display">N \in (0,FFFF]</script><script type="math/tex; mode=display">X \div N = \lfloor H \div N \rfloor \cdot 65536 + [H \pmod N \cdot 65536+L] \div N</script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">divdw:</span><br><span class="line">    ; 名称:divdw</span><br><span class="line">    ; 功能:不会溢出的除法</span><br><span class="line">;          c=a/b, a:dword, b:word, c:dword</span><br><span class="line">; 参数:(ax)=a的低16位</span><br><span class="line">;      (dx)=a的高16位</span><br><span class="line">;      (cx)=b</span><br><span class="line">; 返回:(ax)=c的低16位</span><br><span class="line">;        (dx)=c的高16位</span><br><span class="line">;        (cx)=余数</span><br><span class="line">; 原理: (H//N)*65536+[(H%N)*65536+L]/N</span><br><span class="line">push bx</span><br><span class="line"></span><br><span class="line">mov bx,ax</span><br><span class="line">mov ax,dx</span><br><span class="line">mov dx,0</span><br><span class="line">div cx</span><br><span class="line">push ax</span><br><span class="line">push bx</span><br><span class="line">pop ax</span><br><span class="line">pop bx</span><br><span class="line">; 利用栈实现ax、bx互换</span><br><span class="line">div cx</span><br><span class="line">mov cx,dx</span><br><span class="line">mov dx,bx</span><br><span class="line"></span><br><span class="line">pop bx</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><h2 id="dtoc子程序"><a href="#dtoc子程序" class="headerlink" title="dtoc子程序"></a>dtoc子程序</h2><p>利用前面编写的<code>dword</code>子程序，将dword类型的数据(总收入)转化为字符串，原理同<code>wtoc</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">dtoc:</span><br><span class="line">    ; 名称:dtoc</span><br><span class="line">    ; 功能:dword转化为字符</span><br><span class="line">    ; 参数:(ax)=dword(低16位)</span><br><span class="line">    ;    (dx)=dword(高16位)</span><br><span class="line">    ; ds:si -&gt; 字符串的开始地址</span><br><span class="line">    ; si(输出) -&gt; 字符串的结束地址</span><br><span class="line">    push ax</span><br><span class="line">    push bx</span><br><span class="line">    push cx</span><br><span class="line">    push dx</span><br><span class="line">    push di</span><br><span class="line">    push bp</span><br><span class="line"></span><br><span class="line">    mov di,0</span><br><span class="line">    divide:</span><br><span class="line">        mov cx,10</span><br><span class="line">        call divdw ; 把div换成divdw</span><br><span class="line">        mov bp,ax</span><br><span class="line">        add cx,30h</span><br><span class="line">        mov ch,0</span><br><span class="line">        push cx</span><br><span class="line">        inc di</span><br><span class="line">        or ax,dx</span><br><span class="line">        mov cx,ax</span><br><span class="line">        mov ax,bp</span><br><span class="line">        jcxz dtoc_cmpd</span><br><span class="line">        jmp short divide</span><br><span class="line">    dtoc_cmpd:</span><br><span class="line">        mov cx,di</span><br><span class="line">        s4:</span><br><span class="line">            pop ax</span><br><span class="line">            mov es:[si],al</span><br><span class="line">            inc si</span><br><span class="line">        loop s4</span><br><span class="line">        mov byte ptr es:[si],0ah</span><br><span class="line">        inc si</span><br><span class="line"></span><br><span class="line">        pop bp</span><br><span class="line">        pop di</span><br><span class="line">        pop dx</span><br><span class="line">        pop cx</span><br><span class="line">        pop bx</span><br><span class="line">        pop ax</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure></p><h2 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h2><p>好了，写了这么多子程序，终于可以开始主程序了。<br>指定各段段寄存器:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br></pre></td></tr></table></figure><br>定义栈段<code>stack</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stack segment</span><br><span class="line">    db 64 dup (0)</span><br><span class="line">    ; 64字节的超大栈段</span><br><span class="line">stack ends</span><br></pre></td></tr></table></figure><br>定义代码段<code>code</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">...</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>初始化段寄存器:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mov ax,data</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,stack</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,32</span><br><span class="line">mov ax,text</span><br><span class="line">mov es,ax</span><br></pre></td></tr></table></figure><br>接下来清个屏，把显存用<code>0720h</code>(即黑底白字的空格)填满:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0b800h</span><br><span class="line">mov es,ax</span><br><span class="line">mov cx,2000</span><br><span class="line">mov bx,0</span><br><span class="line">clear:</span><br><span class="line">    mov word ptr es:[bx],0720h</span><br><span class="line">    add bx,2</span><br><span class="line">loop clear</span><br></pre></td></tr></table></figure><br>打印年份，本来就是字符串，写入<code>text</code>段后直接用<code>printf</code>打印，不需要做什么特殊的处理:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mov ax,text</span><br><span class="line">mov es,ax</span><br><span class="line">mov di,0</span><br><span class="line">mov cx,21</span><br><span class="line">mov si,0</span><br><span class="line">s2:</span><br><span class="line">    push cx</span><br><span class="line">    mov cx,4</span><br><span class="line">    s3:</span><br><span class="line">        mov al,ds:[di]</span><br><span class="line">        mov es:[si],al</span><br><span class="line">        inc di</span><br><span class="line">        inc si</span><br><span class="line">    loop s3</span><br><span class="line">    mov byte ptr es:[si],0ah ; 每一个年份换一次行</span><br><span class="line">    inc si</span><br><span class="line">    pop cx</span><br><span class="line">loop s2</span><br><span class="line">mov byte ptr es:[si],0 ; 结尾加个0，表示字符串结束</span><br><span class="line">mov si,0a0h ; 位置:(0,1)</span><br><span class="line">call printf</span><br></pre></td></tr></table></figure><br>接下来打印收入，通过<code>dtoc</code>先转化成字符再用<code>printf</code>打印:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mov ax,data</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,text</span><br><span class="line">mov es,ax</span><br><span class="line"></span><br><span class="line">mov di,0</span><br><span class="line">mov cx,21</span><br><span class="line">mov si,0</span><br><span class="line">s5:</span><br><span class="line">    mov ax,ds:[di+54h] ; ax存储低16位</span><br><span class="line">    mov dx,ds:[di+56h] ; dx存储高16位</span><br><span class="line">    call dtoc</span><br><span class="line">    add di,4</span><br><span class="line">loop s5</span><br><span class="line">mov byte ptr es:[si],0</span><br><span class="line">mov si,0a0h</span><br><span class="line">add si,40  ; 位置(20,1)</span><br><span class="line">call printf</span><br></pre></td></tr></table></figure><br>雇员人数，使用<code>wtoc</code>转化成字符，再用<code>printf</code>打印:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mov di,0</span><br><span class="line">mov cx,21</span><br><span class="line">mov si,0</span><br><span class="line">s6:</span><br><span class="line">    mov ax,ds:[di+0a8h]</span><br><span class="line">    call wtoc</span><br><span class="line">    add di,2</span><br><span class="line">loop s6</span><br><span class="line">mov byte ptr es:[si],0</span><br><span class="line">mov si,0a0h</span><br><span class="line">add si,80 ; 位置(40,1)</span><br><span class="line">call printf</span><br></pre></td></tr></table></figure><br>关于为什么是<code>+54h</code>、<code>+56h</code>、<code>+0a8h</code>，<a href="https://hiedanoajuu.github.io/2025/01/19/expt-7/#%E5%88%86%E6%9E%90">实验7</a>已经分析过了，此处不再赘述。</p><p>人均收入，可以先通过除法算出人均收入，再用<code>wtoc</code>转化为字符，最后用<code>printf</code>输出:<br>(由于<a href="https://hiedanoajuu.github.io/2025/01/19/expt-7/#%E9%A1%B9%E7%9B%AE%E6%83%85%E6%99%AF">实验7</a>中人均收入是2字节，所以这里我们不必担心溢出问题，可以直接用<code>div</code>计算)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mov di,0</span><br><span class="line">mov cx,21</span><br><span class="line">mov bx,0</span><br><span class="line">mov si,0</span><br><span class="line">s8:</span><br><span class="line">    mov ax,ds:[bx+54h]</span><br><span class="line">    mov dx,ds:[bx+56h]</span><br><span class="line">    div word ptr ds:[di+0a8h]</span><br><span class="line">    call wtoc</span><br><span class="line">    add di,2</span><br><span class="line">    add bx,4</span><br><span class="line">loop s8</span><br><span class="line">mov byte ptr es:[si],0</span><br><span class="line">mov si,0a0h</span><br><span class="line">add si,120 ; 位置(60,1)</span><br><span class="line">call printf</span><br></pre></td></tr></table></figure><br>最后返回:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure><br>完整的程序如下:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line">; p1.asm</span><br><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#x27;1975&#x27;,&#x27;1976&#x27;,&#x27;1977&#x27;,&#x27;1978&#x27;,&#x27;1979&#x27;,&#x27;1980&#x27;,&#x27;1981&#x27;,&#x27;1982&#x27;,&#x27;1983&#x27;</span><br><span class="line">    db &#x27;1984&#x27;,&#x27;1985&#x27;,&#x27;1986&#x27;,&#x27;1987&#x27;,&#x27;1988&#x27;,&#x27;1989&#x27;,&#x27;1990&#x27;,&#x27;1991&#x27;,&#x27;1992&#x27;</span><br><span class="line">    db &#x27;1993&#x27;,&#x27;1994&#x27;,&#x27;1995&#x27;</span><br><span class="line">    ;The above is 21 strings representing 21 years</span><br><span class="line"></span><br><span class="line">    dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514</span><br><span class="line">    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000</span><br><span class="line">    ;The above is 21 dwords representing the incomes of 21 years</span><br><span class="line"></span><br><span class="line">    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226</span><br><span class="line">    dw 11542,14430,15257,17800</span><br><span class="line">    ;The above is 21 words representing the numbers of employees</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">text segment</span><br><span class="line">    db 160 dup (0)</span><br><span class="line">text ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">    db 64 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">        ; segReg init</span><br><span class="line">        mov ax,data</span><br><span class="line">        mov ds,ax</span><br><span class="line">        mov ax,stack</span><br><span class="line">        mov ss,ax</span><br><span class="line">        mov sp,32</span><br><span class="line">        mov ax,text</span><br><span class="line">        mov es,ax</span><br><span class="line"></span><br><span class="line">        ; Clear the screen</span><br><span class="line">        mov ax,0b800h</span><br><span class="line">        mov es,ax</span><br><span class="line">        mov cx,2000</span><br><span class="line">        mov bx,0</span><br><span class="line">        clear:</span><br><span class="line">            mov word ptr es:[bx],0720h</span><br><span class="line">            add bx,2</span><br><span class="line">        loop clear</span><br><span class="line"></span><br><span class="line">        ; Years</span><br><span class="line">        mov ax,text</span><br><span class="line">        mov es,ax</span><br><span class="line">        mov di,0</span><br><span class="line">        mov cx,21</span><br><span class="line">        mov si,0</span><br><span class="line">        s2:</span><br><span class="line">            push cx</span><br><span class="line">            mov cx,4</span><br><span class="line">            s3:</span><br><span class="line">                mov al,ds:[di]</span><br><span class="line">                mov es:[si],al</span><br><span class="line">                inc di</span><br><span class="line">                inc si</span><br><span class="line">            loop s3</span><br><span class="line">            mov byte ptr es:[si],0ah</span><br><span class="line">            inc si</span><br><span class="line">            pop cx</span><br><span class="line">        loop s2</span><br><span class="line">        mov byte ptr es:[si],0</span><br><span class="line">        mov si,0a0h ;(0,1)</span><br><span class="line">        call printf</span><br><span class="line"></span><br><span class="line">        ; Incomes</span><br><span class="line">        mov ax,data</span><br><span class="line">        mov ds,ax</span><br><span class="line">        mov ax,text</span><br><span class="line">        mov es,ax</span><br><span class="line">        </span><br><span class="line">        mov di,0</span><br><span class="line">        mov cx,21</span><br><span class="line">        mov si,0</span><br><span class="line">        s5:</span><br><span class="line">            mov ax,ds:[di+54h]</span><br><span class="line">            mov dx,ds:[di+56h]</span><br><span class="line">            call dtoc</span><br><span class="line">            add di,4</span><br><span class="line">        loop s5</span><br><span class="line">        mov byte ptr es:[si],0</span><br><span class="line">        mov si,0a0h</span><br><span class="line">        add si,40  ;(20,1)</span><br><span class="line">        call printf</span><br><span class="line"></span><br><span class="line">        ; Employees</span><br><span class="line">        mov di,0</span><br><span class="line">        mov cx,21</span><br><span class="line">        mov si,0</span><br><span class="line">        s6:</span><br><span class="line">            mov ax,ds:[di+0a8h]</span><br><span class="line">            call wtoc</span><br><span class="line">            add di,2</span><br><span class="line">        loop s6</span><br><span class="line">        mov byte ptr es:[si],0</span><br><span class="line">        mov si,0a0h</span><br><span class="line">        add si,80 ; (40,1)</span><br><span class="line">        call printf</span><br><span class="line"></span><br><span class="line">        ; PCI</span><br><span class="line">        mov di,0</span><br><span class="line">        mov cx,21</span><br><span class="line">        mov bx,0</span><br><span class="line">        mov si,0</span><br><span class="line">        s8:</span><br><span class="line">            mov ax,ds:[bx+54h]</span><br><span class="line">            mov dx,ds:[bx+56h]</span><br><span class="line">            div word ptr ds:[di+0a8h]</span><br><span class="line">            call wtoc</span><br><span class="line">            add di,2</span><br><span class="line">            add bx,4</span><br><span class="line">        loop s8</span><br><span class="line">        mov byte ptr es:[si],0</span><br><span class="line">        mov si,0a0h</span><br><span class="line">        add si,120 ; (60,1)</span><br><span class="line">        call printf</span><br><span class="line"></span><br><span class="line">        ; Teminate</span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21h</span><br><span class="line"></span><br><span class="line">    printf:</span><br><span class="line">        ; Name:printf</span><br><span class="line">        ; Function:Print the strings at the specified position,0A -&gt; \n,ending in 0</span><br><span class="line">        ; Parameter:text seg -&gt; content to be printed</span><br><span class="line">        ;           (si) -&gt; position</span><br><span class="line">        push di</span><br><span class="line">        push cx</span><br><span class="line">        push es</span><br><span class="line">        push ds</span><br><span class="line">        push si</span><br><span class="line">        push si</span><br><span class="line"></span><br><span class="line">        mov di,0</span><br><span class="line">        mov cx,text</span><br><span class="line">        mov ds,cx</span><br><span class="line">        mov cx,0b800h</span><br><span class="line">        mov es,cx</span><br><span class="line">        s0:</span><br><span class="line">            mov ch,0</span><br><span class="line">            mov cl,ds:[di]</span><br><span class="line">            jcxz printf_cmpd</span><br><span class="line">            sub cx,0ah</span><br><span class="line">            jcxz lineFeed </span><br><span class="line">            add cx,0ah</span><br><span class="line">            mov ch,7h</span><br><span class="line">            mov es:[si],cx</span><br><span class="line">            add si,2</span><br><span class="line">            s1:</span><br><span class="line">                add di,1</span><br><span class="line">                jmp short s0</span><br><span class="line">            lineFeed:</span><br><span class="line">                pop si</span><br><span class="line">                add si,0a0h</span><br><span class="line">                push si</span><br><span class="line">                jmp short s1</span><br><span class="line">        printf_cmpd:</span><br><span class="line">            pop si</span><br><span class="line">            pop si</span><br><span class="line">            pop ds</span><br><span class="line">            pop es</span><br><span class="line">            pop cx</span><br><span class="line">            pop di</span><br><span class="line">            ret</span><br><span class="line">    divdw:</span><br><span class="line">        ; Name:divdw</span><br><span class="line">        ; Function:Dividing without overflow</span><br><span class="line">    ;          c=a/b, a:dword, b:word, c:dword</span><br><span class="line">    ; Parameter:(ax)=a low 16 bits</span><br><span class="line">    ;           (dx)=a high 16 bits</span><br><span class="line">    ;           (cx)=b</span><br><span class="line">    ; Return:(ax)=c low 16 bits</span><br><span class="line">    ;        (dx)=c high 16 bits</span><br><span class="line">    ;        (cx)=change</span><br><span class="line">    ; Principle: (H//N)*65536+[(H%N)*65536+L]/N</span><br><span class="line">    push bx</span><br><span class="line"></span><br><span class="line">    mov bx,ax</span><br><span class="line">    mov ax,dx</span><br><span class="line">    mov dx,0</span><br><span class="line">    div cx</span><br><span class="line">    push ax</span><br><span class="line">    push bx</span><br><span class="line">    pop ax</span><br><span class="line">    pop bx</span><br><span class="line">    div cx</span><br><span class="line">    mov cx,dx</span><br><span class="line">    mov dx,bx</span><br><span class="line"></span><br><span class="line">    pop bx</span><br><span class="line">    ret</span><br><span class="line">    dtoc:</span><br><span class="line">        ; Name:dtoc</span><br><span class="line">        ; Function: dword -&gt; char</span><br><span class="line">        ; Parameter: (ax)=dword(low 16bits)</span><br><span class="line">        ;      (dx)=dword(high 16bits)</span><br><span class="line">        ; ds:si(in) -&gt; Starting adress of string</span><br><span class="line">        ; si(out) -&gt; Ending adress of string</span><br><span class="line">        push ax</span><br><span class="line">        push bx</span><br><span class="line">        push cx</span><br><span class="line">        push dx</span><br><span class="line">        push di</span><br><span class="line">        push bp</span><br><span class="line"></span><br><span class="line">        mov di,0</span><br><span class="line">        divide:</span><br><span class="line">            mov cx,10</span><br><span class="line">            call divdw</span><br><span class="line">            mov bp,ax</span><br><span class="line">            add cx,30h</span><br><span class="line">            mov ch,0</span><br><span class="line">            push cx</span><br><span class="line">            inc di</span><br><span class="line">            or ax,dx</span><br><span class="line">            mov cx,ax</span><br><span class="line">            mov ax,bp</span><br><span class="line">            jcxz dtoc_cmpd</span><br><span class="line">            jmp short divide</span><br><span class="line">        dtoc_cmpd:</span><br><span class="line">            mov cx,di</span><br><span class="line">            s4:</span><br><span class="line">                pop ax</span><br><span class="line">                mov es:[si],al</span><br><span class="line">                inc si</span><br><span class="line">            loop s4</span><br><span class="line">            mov byte ptr es:[si],0ah</span><br><span class="line">            inc si</span><br><span class="line"></span><br><span class="line">            pop bp</span><br><span class="line">            pop di</span><br><span class="line">            pop dx</span><br><span class="line">            pop cx</span><br><span class="line">            pop bx</span><br><span class="line">            pop ax</span><br><span class="line">            ret</span><br><span class="line">    wtoc:</span><br><span class="line">        ; Name:wtoc</span><br><span class="line">        ; Function: number(word) -&gt; char</span><br><span class="line">        ; Parameter: (ax)=Word</span><br><span class="line">        ; ds:si -&gt; Starting adress of string</span><br><span class="line">        ; si(out) -&gt; Ending adress of string</span><br><span class="line">        push ax</span><br><span class="line">        push bx</span><br><span class="line">        push cx</span><br><span class="line">        push dx</span><br><span class="line">        push di</span><br><span class="line"></span><br><span class="line">        mov di,0</span><br><span class="line">        divide_w:</span><br><span class="line">            mov dx,0</span><br><span class="line">            mov bx,10</span><br><span class="line">            div bx</span><br><span class="line">            add dx,30h</span><br><span class="line">            mov dh,0</span><br><span class="line">            push dx</span><br><span class="line">            inc di</span><br><span class="line">            mov cx,ax</span><br><span class="line">            jcxz wtoc_cmpd</span><br><span class="line">            jmp short divide_w</span><br><span class="line">        wtoc_cmpd:</span><br><span class="line">            mov cx,di</span><br><span class="line">            s7:</span><br><span class="line">                pop ax</span><br><span class="line">                mov es:[si],al</span><br><span class="line">                inc si</span><br><span class="line">            loop s7</span><br><span class="line">            mov byte ptr es:[si],0ah</span><br><span class="line">            inc si</span><br><span class="line"></span><br><span class="line">            pop di</span><br><span class="line">            pop dx</span><br><span class="line">            pop cx</span><br><span class="line">            pop bx</span><br><span class="line">            pop ax</span><br><span class="line">            ret</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>想不到居然能写282行(</p><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>编译、链接，生成<code>p1.exe</code>;<br><img src="assemble.png" alt="编译" title="编译"><br>运行结果如图所示:<br><img src="table.png" alt="运行结果" title="运行结果"><br>可以看到，与题目的要求完全一致。<br><strong>项目完成</strong></p>]]></content>
    
    
    <summary type="html">看似简单的小项目写了足足282行代码(</summary>
    
    
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="汇编语言" scheme="https://hiedanoajuu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Masm" scheme="https://hiedanoajuu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/Masm/"/>
    
    
    <category term="内存" scheme="https://hiedanoajuu.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="汇编语言" scheme="https://hiedanoajuu.github.io/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>&quot;Hello World&quot;在Masm上的实现</title>
    <link href="https://hiedanoajuu.github.io/2025/01/21/hello-world-masm/"/>
    <id>https://hiedanoajuu.github.io/2025/01/21/hello-world-masm/</id>
    <published>2025-01-21T04:43:45.000Z</published>
    <updated>2025-01-21T06:18:13.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目情景"><a href="#项目情景" class="headerlink" title="项目情景"></a>项目情景</h1><p>编程:在屏幕中间分别显示绿色、绿底红色、白底蓝色的字符串”welcome to masm!”</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>情景要求以及需要实现的功能非常简单，这里分析一下其中的几个要点:</p><ol><li>字符串<code>&quot;welcome to masm!&quot;</code>，查表可得其ASCII编码，不过也可以直接写到<code>data</code>段里，打印时再取用，将ASCII编码写入显示的字符所在字的低位字节即可；</li><li><strong>中间</strong>，也即屏幕正中间，我们要打印的字符串长度为16，共打印3次，对于80x25(字符)的DOS屏幕，如果要显示在正中间，第1行应显示在第12行(偏移地址为<code>780H</code>)处，每行第1个字符应显示在该行的第32列处(偏移地址为<code>40H</code>)，换行可以通过偏移地址<code>+0A0H</code>实现，因为每行显示80个字符，每个字符占2字节；</li><li><strong>绿色</strong>、<strong>绿底红色</strong>、<strong>白底蓝色</strong>，可以通过调节属性字节实现更改，属性字节的格式如下:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">7  6 5 4 3 2 1 0</span><br><span class="line">BL R G B I R G B</span><br><span class="line">0-2为前景色，3为高亮，4-6为背景色，7为闪烁</span><br></pre></td></tr></table></figure><strong>绿色</strong>的属性字节为:<code>0000 0010B</code>，即<code>02H</code>；<br><strong>绿底红色</strong>的属性字节为:<code>0010 0100B</code>，即<code>24H</code>；<br><strong>白底蓝色</strong>的属性字节为:<code>0111 0001B</code>，即<code>71H</code>；<br>将对应的属性字节写入显示的字符所在字的高位字节即可；</li></ol><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h1><p>指定各段的段寄存器:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data</span><br></pre></td></tr></table></figure><br>定义数据段<code>data</code>，向其中写入需要打印的字符串<code>welcome to masm!</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data segment</span><br><span class="line">    db &quot;w e l c o m e   t o   m a s m ! &quot;</span><br><span class="line">    ; 需要被打印的字符串</span><br><span class="line">data ends</span><br></pre></td></tr></table></figure><br>每个字符后面都加了一个空格，是为了以字的形式写入字符串，确保与显存中的位置拥有相同的偏移地址；</p><p>定义代码段<code>code</code>和程序起始点<code>start</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">......</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>由于没有需要暂存的数据(比如循环变量)，所以这次的程序中不需要栈段；</p><p>初始化各段寄存器，使<code>ds</code>指向<code>data</code>，<code>es</code>指向显存:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov ax,data</span><br><span class="line">mov ds,ax</span><br><span class="line"></span><br><span class="line">mov ax,0b800h</span><br><span class="line">mov es,ax</span><br></pre></td></tr></table></figure></p><p>以第一行为例，简单看看打印文本的代码:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">; 第1行</span><br><span class="line">; 背景:黑</span><br><span class="line">; 前景:绿</span><br><span class="line">mov bx,0</span><br><span class="line">mov si,780h ; 设置第1行的偏移地址</span><br><span class="line">mov cx,16   ; 16个字符，循环16次</span><br><span class="line">s:</span><br><span class="line">    mov al,ds:[bx]</span><br><span class="line">    mov ah,02h  ; 将ASCII码与属性字节02H拼接形成显存中的字</span><br><span class="line">    mov es:[bx+si+40h],ax ; 写入显存对应位置，因为每行第1个字符在第32列所以要+40H</span><br><span class="line">    add bx,2</span><br><span class="line">    inc di</span><br><span class="line">loop s</span><br></pre></td></tr></table></figure><br>换行就<code>si+0A0H</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add si,0a0h</span><br></pre></td></tr></table></figure><br>其他两行也是同理，此处就不再赘述了；<br>(本来想用一个循环的，但是每行需要写入的属性字节不同，只得作罢)</p><p>最后返回:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure></p><p>完整的程序如下:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">; hello.asm</span><br><span class="line">assume cs:code,ds:data</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &quot;w e l c o m e   t o   m a s m ! &quot;</span><br><span class="line">    ; The strings to be printed</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">        ; segReg init</span><br><span class="line">        mov ax,data</span><br><span class="line">        mov ds,ax</span><br><span class="line"></span><br><span class="line">        mov ax,0b800h</span><br><span class="line">        mov es,ax</span><br><span class="line"></span><br><span class="line">        ; 1st line</span><br><span class="line">        ; bg:black</span><br><span class="line">        ; fg:green</span><br><span class="line">        mov bx,0</span><br><span class="line">        mov si,780h</span><br><span class="line">        mov cx,16</span><br><span class="line">        s:</span><br><span class="line">            mov al,ds:[bx]</span><br><span class="line">            mov ah,02h</span><br><span class="line">            mov es:[bx+si+40h],ax</span><br><span class="line">            add bx,2</span><br><span class="line">            inc di</span><br><span class="line">        loop s</span><br><span class="line"></span><br><span class="line">        ; 2nd line</span><br><span class="line">        ; bg:green</span><br><span class="line">        ; fg:red</span><br><span class="line">        mov bx,0</span><br><span class="line">        add si,0a0h</span><br><span class="line">        mov cx,16</span><br><span class="line">        s1:</span><br><span class="line">            mov al,ds:[bx]</span><br><span class="line">            mov ah,24h</span><br><span class="line">            mov es:[bx+si+40h],ax</span><br><span class="line">            add bx,2</span><br><span class="line">            inc di</span><br><span class="line">        loop s1</span><br><span class="line"></span><br><span class="line">        ; 3rd line</span><br><span class="line">        ; bg:white</span><br><span class="line">        ; fg:blue</span><br><span class="line">        mov bx,0</span><br><span class="line">        add si,0a0h</span><br><span class="line">        mov cx,16</span><br><span class="line">        s2:</span><br><span class="line">            mov al,ds:[bx]</span><br><span class="line">            mov ah,71h</span><br><span class="line">            mov es:[bx+si+40h],ax</span><br><span class="line">            add bx,2</span><br><span class="line">            inc di</span><br><span class="line">        loop s2</span><br><span class="line"></span><br><span class="line">        ; Termination</span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>感觉写得很烂，但似乎也没有更好的实现方法了(</p><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>编译、链接，生成<code>hello.exe</code><br><img src="assemble.png" alt="编译" title="编译"><br>运行结果如图所示:<br><img src="hello.png" alt="welcome to masm!" title="运行结果"><br>可以看到，程序以正确的格式在屏幕正中间显示了字符串<code>&quot;welcome to masm!&quot;</code>，完美地实现了功能；<br><strong>项目完成</strong></p>]]></content>
    
    
    <summary type="html">没想到要学这么久Masm才能把Hello world写出来（悲</summary>
    
    
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="汇编语言" scheme="https://hiedanoajuu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Masm" scheme="https://hiedanoajuu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/Masm/"/>
    
    
    <category term="汇编语言" scheme="https://hiedanoajuu.github.io/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Hello World" scheme="https://hiedanoajuu.github.io/tags/Hello-World/"/>
    
    <category term="显存" scheme="https://hiedanoajuu.github.io/tags/%E6%98%BE%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>寻址方式在结构化数据访问中的应用</title>
    <link href="https://hiedanoajuu.github.io/2025/01/19/expt-7/"/>
    <id>https://hiedanoajuu.github.io/2025/01/19/expt-7/</id>
    <published>2025-01-19T03:54:16.000Z</published>
    <updated>2025-01-21T05:53:13.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目情景"><a href="#项目情景" class="headerlink" title="项目情景"></a>项目情景</h1><p>Power idea 公司从 1975 年成立一直到 1995 年的基本情况如下。</p><div class="table-container"><table><thead><tr><th>年份</th><th style="text-align:right">收入</th><th style="text-align:right">雇员</th><th>人均收入</th></tr></thead><tbody><tr><td>1975</td><td style="text-align:right">16</td><td style="text-align:right">3</td><td>?</td></tr><tr><td>1976</td><td style="text-align:right">22</td><td style="text-align:right">7</td><td>?</td></tr><tr><td>1977</td><td style="text-align:right">382</td><td style="text-align:right">9</td><td>?</td></tr><tr><td>1978</td><td style="text-align:right">1356</td><td style="text-align:right">13</td><td>?</td></tr><tr><td>1979</td><td style="text-align:right">2390</td><td style="text-align:right">28</td><td>?</td></tr><tr><td>1980</td><td style="text-align:right">8000</td><td style="text-align:right">38</td><td>?</td></tr><tr><td>…</td><td style="text-align:right"></td><td style="text-align:right"></td><td></td></tr><tr><td>1995</td><td style="text-align:right">5,937,000</td><td style="text-align:right">17,800</td><td>?</td></tr></tbody></table></div><p>下面的程序中，已经定义好了这些数据:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">; source.asm</span><br><span class="line">assume cs:codesg</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#x27;1975&#x27;,&#x27;1976&#x27;,&#x27;1977&#x27;,&#x27;1978&#x27;,&#x27;1979&#x27;,&#x27;1980&#x27;,&#x27;1981&#x27;,&#x27;1982&#x27;,&#x27;1983&#x27;</span><br><span class="line">    db &#x27;1984&#x27;,&#x27;1985&#x27;,&#x27;1986&#x27;,&#x27;1987&#x27;,&#x27;1988&#x27;,&#x27;1989&#x27;,&#x27;1990&#x27;,&#x27;1991&#x27;,&#x27;1992&#x27;</span><br><span class="line">    db &#x27;1993&#x27;,&#x27;1994&#x27;,&#x27;1995&#x27;</span><br><span class="line">    ;以上是表示21年的21个字符串</span><br><span class="line"></span><br><span class="line">    dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514</span><br><span class="line">    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000</span><br><span class="line">    ;以上是表示21年公司收入的21个dword型数据</span><br><span class="line"></span><br><span class="line">    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226</span><br><span class="line">    dw 11542,14430,15257,17800</span><br><span class="line">    ;以上是表示21年公司雇员人数的21个word型数据</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">table segment</span><br><span class="line">    db 21 dup (&#x27;year summ ne ?? &#x27;)</span><br><span class="line">table ends</span><br></pre></td></tr></table></figure></p><p>编程，将<code>data</code>段中的数据按如下格式写入到<code>table</code>段中，并计算21年中的人均收入(取整)，结果也按照下面的格式保存在<code>table</code>段中。</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">年份 (4B)</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">空格（1B）</th><th style="text-align:center">收入 (4B)</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">空格 (1B)</th><th style="text-align:center">雇员数（2B）</th><th style="text-align:center"></th><th>空格 (1B)</th><th>人均收入 (2B)</th><th></th><th>空格 (1B)</th></tr></thead><tbody><tr><td style="text-align:center">table</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center">9</td><td style="text-align:center">A</td><td style="text-align:center">B</td><td>C</td><td>D</td><td>E</td><td>F</td></tr><tr><td style="text-align:center">0H</td><td style="text-align:center">1</td><td style="text-align:center">9</td><td style="text-align:center">7</td><td style="text-align:center">5</td><td style="text-align:center"></td><td style="text-align:center">16</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">3</td><td style="text-align:center"></td><td></td><td></td><td>??</td><td></td></tr><tr><td style="text-align:center">10H</td><td style="text-align:center">1</td><td style="text-align:center">9</td><td style="text-align:center">7</td><td style="text-align:center">6</td><td style="text-align:center"></td><td style="text-align:center">22</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">7</td><td style="text-align:center"></td><td></td><td></td><td>??</td><td></td></tr><tr><td style="text-align:center">…</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:center">140H</td><td style="text-align:center">1</td><td style="text-align:center">9</td><td style="text-align:center">9</td><td style="text-align:center">5</td><td style="text-align:center"></td><td style="text-align:center">5,937,000</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">17,800</td><td style="text-align:center"></td><td></td><td></td><td>??</td><td></td></tr></tbody></table></div><p>提示，可将<code>data</code>段中的数据看成是多个数组，而将<code>table</code>中的数据看成是一个结构型数据的数组，每个结构型数据包含多个数据项。可用<code>bx</code>定位每个结构型数据，用<code>idata</code>定位数据项，用<code>si</code>定位数组项中的每个元素，对于<code>table</code>中的数据的访问可采用<code>[bx].idata</code>和<code>[bx].idata[si]</code>的寻址方式。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>源程序<code>source.asm</code>中共定义了<code>codesg</code>(因为个人习惯，下改为<code>code</code>)，<code>data</code>与<code>table</code>段:</p><ul><li><code>code</code>段用于存储汇编指令，对应的段寄存器为<code>cs</code>；</li><li><code>data</code>段用于存储输入数据，对应的段寄存器为<code>ds</code>；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data segment</span><br><span class="line">    db &#x27;1975&#x27;,&#x27;1976&#x27;,&#x27;1977&#x27;,&#x27;1978&#x27;,&#x27;1979&#x27;,&#x27;1980&#x27;,&#x27;1981&#x27;,&#x27;1982&#x27;,&#x27;1983&#x27;</span><br><span class="line">    db &#x27;1984&#x27;,&#x27;1985&#x27;,&#x27;1986&#x27;,&#x27;1987&#x27;,&#x27;1988&#x27;,&#x27;1989&#x27;,&#x27;1990&#x27;,&#x27;1991&#x27;,&#x27;1992&#x27;</span><br><span class="line">    db &#x27;1993&#x27;,&#x27;1994&#x27;,&#x27;1995&#x27;</span><br><span class="line">    ;以上是表示21年的21个字符串</span><br><span class="line"></span><br><span class="line">    dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514</span><br><span class="line">    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000</span><br><span class="line">    ;以上是表示21年公司收入的21个dword型数据</span><br><span class="line"></span><br><span class="line">    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226</span><br><span class="line">    dw 11542,14430,15257,17800</span><br><span class="line">    ;以上是表示21年公司雇员人数的21个word型数据</span><br><span class="line">data ends</span><br></pre></td></tr></table></figure><p>分为三部分，由<code>data:0H</code>至<code>53H</code>为年份，步长为4字节；由<code>data:54H</code>至<code>A7H</code>为收入，步长为4字节；由<code>data:A8H</code>至段末为雇员人数，步长为2字节；<br>可以通过<code>bx</code>加上对应的步长实现对对应数据的定位，由于年份与收入两段的步长相等，共用同一个偏移地址，因此对两部分数据的处理可以在同一循环中进行；</p><ul><li><code>table</code>段用于存储输出数据，未指定段寄存器；<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">table segment</span><br><span class="line">    db 21 dup (&#x27;year summ ne ?? &#x27;)</span><br><span class="line">table ends</span><br></pre></td></tr></table></figure><code>table</code>段中每一“行”(10H)<code>year</code>对应的4个字节用于存储年份(字符串)，<code>summ</code>对应的4个字节用于存储收入(dword)，<code>ne</code>对应的2个字节用来存储雇员人数(word)，<code>??</code>对应的两个字节用于存储人均收入(word)；<br>可以将<code>es</code>指定为<code>table</code>段的段寄存器，通过<code>es+1</code>来实现换“行”；</li></ul><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h1><p>指定各段的段寄存器:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br></pre></td></tr></table></figure><br>定义栈段<code>stack</code>，用于暂存<code>cx</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stack segment</span><br><span class="line">    dw 8 dup (0)</span><br><span class="line">    ; 创建栈段暂存cx</span><br><span class="line">stack ends</span><br></pre></td></tr></table></figure><br>定义<code>code</code>段和程序起始点<code>start</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">......</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>初始化各寄存器，使<code>ds</code>指向<code>data</code>，<code>es</code>指向<code>table</code>，<code>ss:sp</code>指向<code>stack</code>栈底:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mov ax,data</span><br><span class="line">mov ds,ax</span><br><span class="line"></span><br><span class="line">mov ax,table</span><br><span class="line">mov es,ax</span><br><span class="line"></span><br><span class="line">mov ax,stack</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,16</span><br></pre></td></tr></table></figure><br>同时处理年份和收入2个长度为4字节的数据:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mov bx,0</span><br><span class="line">mov cx,21</span><br><span class="line">s0:</span><br><span class="line">  push cx</span><br><span class="line">  mov si,0</span><br><span class="line">  mov cx,4</span><br><span class="line">  ; 4字节，循环4次，每次复制1字节</span><br><span class="line">  s1:</span><br><span class="line">     ; 年份</span><br><span class="line">     mov al,ds:[bx+si]  ; ds:[bx+si]即data年份部分(0-53H)</span><br><span class="line">     mov es:[si],al     ; es:[si]即table每行(10H)的&quot;year&quot;位置</span><br><span class="line">     ; 收入</span><br><span class="line">     mov al,ds:[bx+si+54h] ; ds:[bx+si+54h]即data收入部分(54H-A7H)</span><br><span class="line">     mov es:[si+5],al      ; es:[si+5]即table每行的&quot;summ&quot;位置</span><br><span class="line">     inc si</span><br><span class="line">  loop s1</span><br><span class="line">  add bx,4</span><br><span class="line">  pop cx</span><br><span class="line">  mov ax,es</span><br><span class="line">  inc ax</span><br><span class="line">  mov es,ax ; 通过es+1实现换行</span><br><span class="line">loop s0</span><br></pre></td></tr></table></figure><br>同时处理雇员人数和人均收入2个长度为4字节的数据:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mov ax,table</span><br><span class="line">mov es,ax</span><br><span class="line">mov bx,0</span><br><span class="line">mov cx,21</span><br><span class="line">s2:</span><br><span class="line">  ; 雇员人数</span><br><span class="line">  mov ax,ds:[bx+0a8h]   ; ds:[bx+0a8h]即data雇员部分(0A8H至段末)</span><br><span class="line">  mov es:[10],ax        ; es:[10]即table每行&quot;ne&quot;位置</span><br><span class="line">  ; 人均收入</span><br><span class="line">  mov ax,es:[5]         ; es:[5]即收入低4字节</span><br><span class="line">  mov dx,es:[7]         ; es:[7]即收入高4字节</span><br><span class="line">  div word ptr es:[10]  ; es:[10]即雇员人数</span><br><span class="line">  mov es:[13],ax        ; es:[13]即table每行&quot;??&quot;位置</span><br><span class="line">  </span><br><span class="line">  add bx,2</span><br><span class="line">  mov ax,es</span><br><span class="line">  inc ax</span><br><span class="line">  mov es,ax</span><br><span class="line">loop s2</span><br></pre></td></tr></table></figure><br>最后退出:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure><br>完整的程序如下:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">; code.asm</span><br><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#x27;1975&#x27;,&#x27;1976&#x27;,&#x27;1977&#x27;,&#x27;1978&#x27;,&#x27;1979&#x27;,&#x27;1980&#x27;,&#x27;1981&#x27;,&#x27;1982&#x27;,&#x27;1983&#x27;</span><br><span class="line">    db &#x27;1984&#x27;,&#x27;1985&#x27;,&#x27;1986&#x27;,&#x27;1987&#x27;,&#x27;1988&#x27;,&#x27;1989&#x27;,&#x27;1990&#x27;,&#x27;1991&#x27;,&#x27;1992&#x27;</span><br><span class="line">    db &#x27;1993&#x27;,&#x27;1994&#x27;,&#x27;1995&#x27;</span><br><span class="line">    ;The above is 21 strings representing 21 years</span><br><span class="line"></span><br><span class="line">    dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514</span><br><span class="line">    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000</span><br><span class="line">    ;The above is 21 dwords representing the incomes of 21 years</span><br><span class="line"></span><br><span class="line">    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226</span><br><span class="line">    dw 11542,14430,15257,17800</span><br><span class="line">    ;The above is 21 words representing the numbers of employees</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">table segment</span><br><span class="line">    db 21 dup (&#x27;year sums em ?? &#x27;)</span><br><span class="line">    ; Create 336 bytes to save the table</span><br><span class="line">table ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">    dw 8 dup (0)</span><br><span class="line">    ; Create a stack to temporarily save CX</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">    ; Segment Register init</span><br><span class="line">    mov ax,data</span><br><span class="line">    mov ds,ax</span><br><span class="line"></span><br><span class="line">    mov ax,table</span><br><span class="line">    mov es,ax</span><br><span class="line"></span><br><span class="line">    mov ax,stack</span><br><span class="line">    mov ss,ax</span><br><span class="line">    mov sp,16</span><br><span class="line"></span><br><span class="line">    ; Years and Incomes(4B)</span><br><span class="line">    mov bx,0</span><br><span class="line">    mov cx,21</span><br><span class="line">    s0:</span><br><span class="line">      push cx</span><br><span class="line">      mov si,0</span><br><span class="line">      mov cx,4</span><br><span class="line">      s1:</span><br><span class="line">         ; Years</span><br><span class="line">         mov al,ds:[bx+si]</span><br><span class="line">         mov es:[si],al</span><br><span class="line">         ; Incomes</span><br><span class="line">         mov al,ds:[bx+si+54h]</span><br><span class="line">         mov es:[si+5],al</span><br><span class="line">         inc si</span><br><span class="line">      loop s1</span><br><span class="line">      add bx,4</span><br><span class="line">      pop cx</span><br><span class="line">      mov ax,es</span><br><span class="line">      inc ax</span><br><span class="line">      mov es,ax</span><br><span class="line">    loop s0</span><br><span class="line"></span><br><span class="line">    ; Employees and PCI(2B)</span><br><span class="line">    mov ax,table</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov bx,0</span><br><span class="line">    mov cx,21</span><br><span class="line">    s2:</span><br><span class="line">      ; Emplyees</span><br><span class="line">      mov ax,ds:[bx+0a8h]</span><br><span class="line">      mov es:[10],ax</span><br><span class="line">      ; PCI</span><br><span class="line">      mov ax,es:[5]</span><br><span class="line">      mov dx,es:[7]</span><br><span class="line">      div word ptr es:[10]</span><br><span class="line">      mov es:[13],ax</span><br><span class="line">      </span><br><span class="line">      add bx,2</span><br><span class="line">      mov ax,es</span><br><span class="line">      inc ax</span><br><span class="line">      mov es,ax</span><br><span class="line">    loop s2</span><br><span class="line"></span><br><span class="line">    ; Termination</span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure></p><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>编译、链接，生成<code>code.exe</code>:<br><img src="assemble.png" alt="编译" title="编译"><br>运行结果如图所示:<br><img src="table.png" alt="table" title="运行结果"><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0778:0000 31 39 37 35 20 10 00 00-00 20 03 00 20 05 00 20 1975 .... .. ..</span><br></pre></td></tr></table></figure><br>可以看到，<code>0H-3H</code>为<code>31 39 37 35</code>即年份<code>1975</code>；第4、9、12、15个字节为<code>20</code>，即空格的ASCII编码；<code>5H-8H</code>为收入<code>10</code>(16)；<code>10H-11H</code>为雇员人数<code>03</code>(3)；<code>13H-14H</code>为人均收入(即收入与雇员人数的商向0舍入的结果)<code>05</code>(5)；<br>同理，各行数据的输出都是正确的；<br><strong>项目完成</strong></p>]]></content>
    
    
    <summary type="html">多种寻址方式在结构化数据访问中的综合应用</summary>
    
    
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="汇编语言" scheme="https://hiedanoajuu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Masm" scheme="https://hiedanoajuu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/Masm/"/>
    
    
    <category term="内存" scheme="https://hiedanoajuu.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="汇编语言" scheme="https://hiedanoajuu.github.io/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>埃及地图</title>
    <link href="https://hiedanoajuu.github.io/2025/01/10/egypt-maps/"/>
    <id>https://hiedanoajuu.github.io/2025/01/10/egypt-maps/</id>
    <published>2025-01-10T09:47:24.000Z</published>
    <updated>2025-01-21T07:14:31.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下埃及"><a href="#下埃及" class="headerlink" title="下埃及"></a>下埃及</h1><p><img src="lower_egypt.gif" alt="下埃及" title="下埃及"></p><ul><li><strong>阿布西尔</strong>(Abusir，阿拉伯语:ابو صير):古埃及称<strong>佩尔-奥西里斯</strong>(pr wsjr)，阿布西尔纸草发现地；</li><li><strong>亚历山大里亚</strong>(Alexandria，希腊语:Ἀλεξάνδρεια，以「大帝」亚历山大三世命名):古埃及称<strong>拉科提斯</strong>(r-ꜥ-qd(y)t)，守护神为塞拉匹斯(埃及神祇阿皮斯与希腊神祇的融合神)，托勒密王朝(第31王朝)首都；</li><li><strong>阿马尔那</strong>(Amarna，阿拉伯语:العمارنة):古埃及称<strong>埃赫塔吞</strong>(Akhetaten)，意为“阿吞地平线”，守护神为阿吞，第18王朝阿马尔那时期首都；</li><li><strong>阿特里比斯</strong>(Athribis，希腊语:Ἄθριβις):古埃及称<strong>赫瓦特-塔-赫里-吉布</strong>(Ḥw.t-tꜣ-ḥry-jb)，守护神为雷皮特，黑牛诺姆(第10诺姆)首府；</li><li><strong>阿瓦里斯</strong>(Avaris，希腊语:Αὔαρις):古埃及称<strong>胡特-瓦雷特</strong>(ḥw.t wꜥr.t)，守护神为塞特，第14、15王朝首都；</li><li><strong>贝尼·哈桑</strong>(Beni Hassan，阿拉伯语:بني حسن):墓地；</li><li><strong>布巴斯提斯</strong>(Bubastis，希腊语:Βούβαστις):古埃及称<strong>佩尔-贝斯特</strong>(Pr-Bȝst.t)，意为贝斯特(猫女神)的神庙，守护神为贝斯特，第22王朝首都，南方王子诺姆(第18诺姆)首府；</li><li><strong>布西里斯</strong>(Busiris，希腊语:Βούσιρις):古埃及称<strong>杰杜</strong>(ḏdw)，守护神为奥西里斯，安杰提神诺姆(第9诺姆)首府；</li><li><strong>布陀</strong>(Buto，希腊语:Βοῦτος):古埃及称<strong>佩尔-瓦吉特</strong>(pr-wꜣḏyt)，意为瓦吉特(下埃及守护神)神庙，守护神为瓦吉特；</li><li><strong>开罗</strong>(Cairo，阿拉伯语:القاهرة):现代埃及首都；</li><li><strong>代赫舒尔</strong>(Dahshur，阿拉伯语:دهشور):代赫舒尔金字塔所在地；</li><li><strong>三角洲</strong>(Delta):<strong>尼罗河三角洲</strong>；</li><li><strong>埃尔-希巴</strong>(el-Hiba，阿拉伯语:الحيبة):古埃及称<strong>塔尤-贾耶特</strong>(t3yw-ḏ3yt)，南方王子诺姆(第18诺姆)首府；</li><li><strong>法尤姆</strong>(Faiyum，阿拉伯语:الفيوم):<strong>法尤姆绿洲</strong>，古埃及称<strong>沙德特</strong>(šd t)；</li><li><strong>吉萨</strong>(Giza，阿拉伯语(埃及):الجيزة):古埃及称<strong>提佩尔西斯</strong>(ϯⲡⲉⲣⲥⲓⲥ)，吉萨大金字塔所在地；</li><li><strong>赫利奥波利斯</strong>(Heliopolis，希腊语:Ἡλιούπολις，意为“日城”):古埃及称<strong>尤努</strong>(jwnw)，意为“柱子”，守护神为拉，繁荣权杖诺姆(第13诺姆)首府；</li><li><strong>赫拉克里奥波利斯</strong>(Heracleopolis，希腊语:Ἡρακλέους πόλις):古埃及称<strong>赫南-奈苏特</strong>(nn nswt)，守护神为赫里沙夫，第9、10王朝首都，索普杜-羽隼诺姆(第20诺姆)首府；</li><li><strong>赫耳墨波利斯</strong>(Hermopolis，希腊语:Ἑρμούπολις):古埃及称<strong>赫姆努</strong>(ḫmnw)，意为“八”，守护神为托特和八元神，哈雷斯诺姆(第15诺姆)首府;</li><li><strong>拉罕</strong>(Lahun，阿拉伯语:اللاهون):古埃及称<strong>拉-赫内特</strong>(rꜣ-ḥn.t)，意为“运河口”；</li><li><strong>莱昂托波利斯</strong>(Leontopolis，希腊语:Λεόντων πόλις，意为“狮城”):古埃及称<strong>塔雷穆</strong>(Taremu)，意为“鱼之地”，守护神为贝斯特和塞赫麦特，第23王朝首都，海塞布公牛诺姆(第11诺姆)首府；</li><li><strong>利什特</strong>(Lisht，阿拉伯语:اللشت):古埃及称<strong>伊特-塔维</strong>(Itj-tawy)，意为“一统两土地”，第12、13王朝首都；</li><li><strong>下埃及</strong>(Lower Egypt):<strong>尼罗河下游及三角洲的埃及土地</strong>，古埃及称<strong>塔-梅胡</strong>(tꜣ mḥw)，意为“北方”；</li><li><strong>孟斐斯</strong>(Memphis，希腊语:Μέμφις):古埃及称<strong>孟斐</strong>(mn nfr)，意为“永久而美丽”，守护神为普塔，第3、4、5、6、7、8、25(库施)、27(波斯)、31(波斯)王朝首都，白墙诺姆(第1诺姆)首府；</li><li><strong>美杜姆</strong>(Meydum，古埃及语:Mr(y)-Jtmw，意为“阿图姆(黄昏的太阳神)眷恋”):美杜姆金字塔所在地；</li><li><strong>门德斯</strong>(Mendes，希腊语:Μένδης):古埃及称<strong>杰德特</strong>(ḏd.t)，守护神为巴内布杰德特，第29王朝首都，鱼诺姆(第16诺姆)首府；</li><li><strong>瑙克拉提斯</strong>(Naucratis，希腊语:Ναύκρατις，意为“海军指挥部”):古埃及称<strong>尼沃特-卡尔特</strong>(Njwt-kꜣrṯ)或<strong>佩尔-梅里特</strong>(pr-mryt)，守护神为托特，古希腊佣兵在埃及的聚集地与殖民地；</li><li><strong>罗塞塔</strong>(Rosetta):罗塞塔石碑出土地，碑文见<a href="https://hiedanoajuu.github.io/2024/06/20/rosetta-stone-translation-greek">我之前的翻译</a>；</li><li><strong>萨卡拉</strong>(Saqqara，阿拉伯语:سقارة):萨卡拉王墓所在地；</li><li><strong>塞本尼托斯</strong>(Sebennytos，希腊语:Σεβέννυτος):古埃及称<strong>圣牛之城</strong>(ṯb-(n)-nṯr)，守护神为安胡尔，第30王朝首都，犊与母牛诺姆(第12诺姆)首府；</li><li><strong>塔尼斯</strong>(Tanis，希腊语:Τάνις):古埃及称<strong>贾奈特</strong>(ḏꜥn.t)，守护神为阿蒙，第21王朝首都，北方王子诺姆(第19诺姆首府)；</li></ul><h1 id="上埃及"><a href="#上埃及" class="headerlink" title="上埃及"></a>上埃及</h1><p><img src="central_egypt.gif" alt="上埃及" title="上埃及"></p><ul><li><strong>第一瀑布</strong>(1st Cataract):<strong>尼罗河第一瀑布</strong>；</li><li><strong>阿拜多斯</strong>(Abydos，阿拉伯语:أبيدوس):古埃及称<strong>阿卜杜</strong>(ꜣbḏw)，守护神为赫恩提阿门图，奥西里斯和伊西斯，大地诺姆(第8诺姆)首府；</li><li><strong>贝特·埃尔-瓦利</strong>(Beit el Wali):埃及神庙，修建于拉美西斯二世时期；</li><li><strong>科普托斯</strong>(Coptos，希腊语:Κόπτος):古埃及称<strong>盖布图</strong>(gbtjw)，守护神为敏，双隼诺姆(第5诺姆首府)，上埃及红海跨哈马马特干谷贸易商业中心；</li><li><strong>丹德拉</strong>(Dendera，阿拉伯语:دَنْدَرة):古埃及称<strong>尤内特</strong>(jwnt)，守护神为哈托尔，鳄鱼诺姆(第6诺姆)首府；</li><li><strong>埃德富</strong>(Edfu，阿拉伯语:إدفو):古埃及称<strong>贝赫德特</strong>(bḥdt)，守护神为荷鲁斯，荷鲁斯王座诺姆(第2诺姆)首府；</li><li><strong>象岛</strong>(Elephantine，希腊语:Ἐλεφαντίνη):古埃及称<strong>阿布</strong>(ꜣbw)，守护神为克奴姆，弓诺姆(第1诺姆)首府；</li><li><strong>埃尔-卡布</strong>(el-Kab，阿拉伯语:الكاب):古埃及称<strong>奈赫布</strong>(nḫb(t))，守护神为奈赫贝特，在奈赫恩之前作为神殿诺姆(第3诺姆)首府，被巨大的泥砖墙环绕；</li><li><strong>伊斯纳</strong>(Esna,阿拉伯语:إسنا):古埃及称<strong>塔-塞内特</strong>(tꜣ-snt)，守护神为克奴姆，在奈赫恩之后成为神殿诺姆(第3诺姆)首府；</li><li><strong>盖贝莱因</strong>(Gebelein，阿拉伯语:الجبلين):古埃及称<strong>佩尔-哈托尔</strong>(pr ḥwt-ḥr)，守护神为哈托尔；</li><li><strong>吉贝尔·埃尔-西尔西拉</strong>(Gebel el-Silsila，阿拉伯语:جبل السلسلة):古埃及称<strong>赫努</strong>(ẖny)；</li><li><strong>杰尔夫·侯赛因</strong>(Gerf Hussein):古埃及称<strong>佩尔-普塔</strong>(Per-Ptah)，有一座普塔神庙；</li><li><strong>希拉孔波利斯</strong>(Hierakonpolis，希腊语:Ἱεράκων πόλις，意为“隼鹰之城”):古埃及称<strong>奈赫恩</strong>(nḫn)，守护神为荷鲁斯，在奈赫布之后成为神殿诺姆(第3诺姆)首府，在奈赫布的尼罗河正对岸；</li><li><strong>涅伽达</strong>(Naqada，阿拉伯语:نقادة):古埃及称<strong>努布特</strong>(Nbyt)，守护神为塞特，前王朝涅伽达文化发现地；</li><li><strong>斐莱</strong>(Philae，希腊语:Φιλαί):古埃及称<strong>帕-尤-尔克</strong>(p3-jw-rķ’)尼罗河上的一个岛，其上有伊西斯神庙；</li><li><strong>塞赫尔岛</strong>(Sehel Island，希腊语:Σῆτις):古埃及称<strong>塞泰特</strong>(sṯt(t))；</li><li><strong>底比斯</strong>(Thebes，阿拉伯语:طيبة):古埃及称<strong>瓦塞特</strong>(wꜣs.t)，守护神为阿蒙，权杖诺姆(第4诺姆)首府，第11、16、17、18、19、25王朝首都；</li><li><strong>托德</strong>(Tod，阿拉伯语:طود):古埃及称<strong>杰尔提</strong>(Ḏrty)，守护神为孟图；</li><li><strong>哈马马特干谷</strong>(Wadi Hammamat，阿拉伯语:وادي الحمامات):上埃及的一条干谷；</li></ul><h1 id="西奈"><a href="#西奈" class="headerlink" title="西奈"></a>西奈</h1><p><img src="sinai.gif" alt="西奈" title="西奈"></p><ul><li><strong>贝鲁西亚</strong>(Pelusium，科普特语:Ⲡⲉⲣⲉⲙⲟⲩⲛ):古埃及称<strong>佩尔-阿蒙</strong>(pr-jmn)，守护神为阿蒙，埃及最东部的主要城市；</li><li><strong>红海</strong>(Red Sea):南起曼德海峡，北至苏伊士运河的一片狭长的、较为封闭的海域；</li><li><strong>塞拉比特·埃尔-哈迪姆</strong>(Serabit el-Khadim，阿拉伯语:سرابيط الخادم):古埃及考古发掘点，发现了几座采矿营地和一座哈托尔神庙；</li><li><strong>西奈</strong>(Sinai，阿拉伯语:سِينَاء):古埃及称<strong>比阿乌</strong>(bjꜣw)，意为“矿产之国”，埃及的一座半岛；</li><li><strong>提姆纳</strong>(Timna，希伯来语:תִּמְנָע):以色列南部的一条河谷；</li><li><strong>马格哈拉干谷</strong>(Wadi Maghara):古埃及称<strong>孟法卡</strong>(mfkꜣ)，意为“绿松石镇”，西奈半岛上的一座干谷；</li></ul><h1 id="努比亚"><a href="#努比亚" class="headerlink" title="努比亚"></a>努比亚</h1><p><img src="southern_egypt.gif" alt="努比亚" title="努比亚"></p><ul><li><strong>第二瀑布</strong>(2nd Cataract):<strong>尼罗河第二瀑布</strong>；</li><li><strong>第三瀑布</strong>(3nd Cataract):<strong>尼罗河第三瀑布</strong>；</li><li><strong>阿布辛贝勒</strong>(Abu Simbel，阿拉伯语:أبو سمبل):两座岩雕神殿遗迹；</li><li><strong>阿马达</strong>(Amada):神庙遗迹；</li><li><strong>阿马拉</strong>(Amara):库施总督所在地；</li><li><strong>阿尼巴</strong>(Aniba):努比亚村庄；</li><li><strong>布亨</strong>(Buhen，古埃及语:b(w)hn):努比亚最大的要塞城镇，有一座铜厂；</li><li><strong>德尔</strong>(Derr):神庙遗迹；</li><li><strong>下努比亚</strong>(Lower Nubia):亦称<strong>瓦瓦特</strong>(Wawat)，努比亚北部；</li><li><strong>塞姆纳</strong>(Semna):古埃及在努比亚的要塞区；</li><li><strong>索雷布</strong>(Soleb):神庙遗迹；</li><li><strong>上努比亚</strong>(Upper Nubia):努比亚南部；</li></ul>]]></content>
    
    
    <summary type="html">埃及地图，来自http://www.mnsu.edu/emuseum/prehistory/egypt/maps/mainmap.html</summary>
    
    
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="古代史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/"/>
    
    <category term="埃及" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E5%9F%83%E5%8F%8A/"/>
    
    <category term="0 杂项" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E5%9F%83%E5%8F%8A/0-%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="渣翻" scheme="https://hiedanoajuu.github.io/tags/%E6%B8%A3%E7%BF%BB/"/>
    
    <category term="埃及" scheme="https://hiedanoajuu.github.io/tags/%E5%9F%83%E5%8F%8A/"/>
    
    <category term="地图" scheme="https://hiedanoajuu.github.io/tags/%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>曼涅托 埃及史(24-10-26)</title>
    <link href="https://hiedanoajuu.github.io/2024/10/07/manetho/"/>
    <id>https://hiedanoajuu.github.io/2024/10/07/manetho/</id>
    <published>2024-10-07T03:36:40.000Z</published>
    <updated>2025-02-01T11:27:24.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一卷"><a href="#第一卷" class="headerlink" title="第一卷"></a>第一卷</h1><h2 id="1-（来自亚美尼亚语版《尤西比乌斯编年史》）"><a href="#1-（来自亚美尼亚语版《尤西比乌斯编年史》）" class="headerlink" title="1 （来自亚美尼亚语版《尤西比乌斯编年史》）"></a>1 （来自亚美尼亚语版《尤西比乌斯编年史》）</h2><p>神王朝、半神朝与亡灵朝。<br>摘自曼涅托《埃及史》，他将他对埃及历史的记叙写成这三卷书。从神明、半神、亡灵，以及统治埃及的人王朝，直到波斯国王大流士。</p><ol><li><p>埃及的第一个人(或者神)是赫菲斯托斯<sup><a href="#fn_1" id="reffn_1">1</a></sup>，在埃及人中也因发现火而闻名。他的儿子赫利俄斯(太阳神)由索西斯继承；然后依次是克洛诺斯、奥西里斯、奥西里斯的弟弟提丰，最后是奥西里斯和伊西斯的儿子奥鲁斯。他们是埃及的第一批统治者。此后，王位由上一个人传给下一个人，这样的继承持续了13,900年而未有中断，直到比迪斯(比特斯)<sup><a href="#fn_2" id="reffn_2">2</a></sup>。然而，这里的“年”我认为是阴历年，也就是说，每年只有30天：如今我们所说的“月”以前被埃及人称作“年”。<sup><a href="#fn_3" id="reffn_3">3</a></sup></p></li><li><p>众神之后，半神统治了1255年，<sup><a href="#fn_4" id="reffn_4">4</a></sup>另一列国王又统治了1817年；之后又出了三十位孟斐斯的国王，<sup><a href="#fn_5" id="reffn_5">5</a></sup>他们统治了1790年。接下来又有十位国王，统治了350年。</p></li><li><p>亡灵与半神<sup><a href="#fn_6" id="reffn_6">6</a></sup>的统治又再延续了5813年。</p></li><li><p>[上述的五个王朝的]统治共计11,000年，<sup><a href="#fn_7" id="reffn_7">7</a></sup>然而这些都是阴历年，也就是月。但是，事实上埃及人所述的整个的统治——神王朝、半神朝和亡灵朝——据估算共包括24,900个阴历年，即2206<sup><a href="#fn_8" id="reffn_8">8</a></sup>个阳历年。</p></li><li><p>现在，如果你愿意将这些数字与希伯来人的年表进行比对，你会发现它们是完美和谐的。希伯来人称埃及为“梅斯特拉伊姆”<sup><a href="#fn_9" id="reffn_9">9</a></sup>；而且梅斯特拉伊姆诞生在大洪水后不久，因为，诺亚的儿子占（或者含），在他们的宗族以这样那样的方式分散时，生下了埃古普托斯，也即梅斯特拉伊姆，第一个着手在埃及定居的人。根据希伯来人的记述，从亚当到大洪水，总计2242年。</p></li><li><p>但是，由于埃及人根据他们历史悠久的王权宣称，在大洪水之前，还有一列神明、半神和亡灵，统治了埃及超过20,000年，显然，这年数如果当作月来算，和希伯来人记载的年数应该是一样的：也就是说，希伯来人记录的年数中所包含的月数应该等于埃及人记录的阴历年数，与从人类最初被创造直到梅斯特拉伊姆估算的总时长一致。梅斯特拉伊姆确是埃及族人的始祖；而埃及的第一个王朝应当是起源于他。</p></li><li><p>但是如果年数还是过多，我们必须假定可能同时有数位埃及国王进行统治；因为他们说这些统治者同时是底比斯、孟斐斯、塞易斯、埃塞俄比亚<sup><a href="#fn_*" id="reffn_*">*</a></sup>和其他地方的国王。此外，似乎有不同的国王统治着不同的地区，每个王朝的统治也只限于自己所在的诺姆：因此，其实不是国王一个接一个地继承王位，而是有数个国王同时在不同地区进行统治。<sup><a href="#fn_10" id="reffn_10">10</a></sup>因此就有了这较大的总年数。但是，让我们抛开这个问题，仔细研究一下埃及历史的年表。</p></li></ol><p>（续见7(b)）</p><h2 id="2-（来自辛凯洛斯）"><a href="#2-（来自辛凯洛斯）" class="headerlink" title="2 （来自辛凯洛斯）"></a>2 （来自辛凯洛斯）</h2><p>此后<sup><a href="#fn_11" id="reffn_11">11</a></sup>，曼涅托还讲述了形成了三十个王朝的五个埃及部落，包括他所谓的神明、半神、亡灵和凡人。对于这些，尤西比乌斯，潘菲鲁斯之“子”，在他的《年代记》中这样描述道：“关于神明、半神、亡灵和凡人，埃及人有一长串愚蠢的神话。事实上，最古老的埃及国王宣称他们的年是由三十天组成的阴历年，而继承他们的半神则将三个月的长年命名为“霍洛伊”。所以尤西比乌斯写信责备埃及人说话愚妄，是很有道理的；而且在我看来，帕诺多鲁斯<sup><a href="#fn_12" id="reffn_12">12</a></sup>在这里因为尤西比乌斯没有解释历史学家的意思而指责尤西比乌斯，是错误的，而帕诺多鲁斯自以为采用了一种较为新颖的方法成功地解释了这一点，具体如下：</p><p>“事实上，从亚当诞生直至以诺，也就是直到创世1282年，那时的日子不是按月与年来计数的；埃格雷戈雷(或者“守望者”)<sup><a href="#fn_13" id="reffn_13">13</a></sup></p><p><strong>（施工中，敬请期待）</strong></p><blockquote id="fn_1"><sup>1</sup>. 前王朝始于一群神明，包括“在孟斐斯被供奉的赫利奥波利斯大九柱神”(T·E·皮特，《剑桥古代史》I p250)(译者注:见1924年的第一版)。在汇总了1-3章后皮特补充道：“从历史的角度来说，这并不能得出什么结论。”关于埃及前王朝时期的传说，见迈耶《古代史》5,I.ii p102及后续。都灵纸草上诸神的顺序如下：(普塔)、拉、(舒)、盖布、奥西里斯、塞特(200年)、荷鲁斯(300年)、托特(3126年)、玛阿特、荷尔。见迈耶《埃及年代学》6并参考片段3(译者注:没找到这本书)。<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote><blockquote id="fn_2"><sup>2</sup>. 比迪斯(或比特斯)似乎是埃及语“国王”(bı͗ty)(来自“蜜蜂”bit)，下埃及国王的头衔：见巴勒莫石碑，并参见希罗多德，IV.155“利比亚人称他们的国王为‘巴托斯’”(P.E.纽贝里)。“bı͗ty”后期作为赫尔墨斯著作的翻译者或是解释者出现：见伊安布利库斯《神秘论》VIII.5(同斯科特《赫耳墨斯文集》IV p34)中先知“bı͗ty”[为国王阿蒙]翻译了一本书(《通往更高之道》，是一篇论文，关于关于达到与神结合的神秘的或是超自然的方法)，他在埃及塞易斯的一座神殿里发现了这本以象形文字雕刻着的著作。参见《伪曼涅托》附录。<a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a></blockquote><blockquote id="fn_3"><sup>3</sup>. 尚无证据表明埃及的一年曾经等于一个月：有短年(每年360天)和长年(见片段49)。<a href="#reffn_3" title="Jump back to footnote [3] in the text."> &#8617;</a></blockquote><blockquote id="fn_4"><sup>4</sup>. 见《野蛮人的拉丁文摘录》(片段4)中这个王朝的开始：“第一个，阿努比斯…”<a href="#reffn_4" title="Jump back to footnote [4] in the text."> &#8617;</a></blockquote><blockquote id="fn_5"><sup>5</sup>. 与都灵纸草第II列相互印证：“孟斐斯的”。<a href="#reffn_5" title="Jump back to footnote [5] in the text."> &#8617;</a></blockquote><blockquote id="fn_6"><sup>6</sup>. “半神”应该是“亡灵”(νέκυες ἡμίθεοι)的同位语，同《野蛮人的拉丁文摘录》(片段4)和阿非利加努斯(片段6.1)。这些或许是谢姆苏·荷尔，都灵纸草上荷鲁斯的追随者或是崇拜者：见H·R·霍尔《剑桥古代史》，I p265。征服了肥沃的三角洲并建立了第一王朝的美尼斯(片段6)王之前，——谢姆苏·荷尔，隼鹰家族的成员们，他们的老家在在西三角洲，他们通过征服上埃及建立了一个更早的统一王国：见V·戈登·蔡尔德《古代近东新看法》1934，基于布雷斯特德《法兰西东方考古学会年报》XXX(开罗，1930),p10及之后和谢费尔在《东方文学杂志》(1932)的批评，p704。<a href="#reffn_6" title="Jump back to footnote [6] in the text."> &#8617;</a></blockquote><blockquote id="fn_7"><sup>7</sup>. 上述各王朝统治年数之和确切为11,025年，下文的24,900也是24,925取整的结果。<a href="#reffn_7" title="Jump back to footnote [7] in the text."> &#8617;</a></blockquote><blockquote id="fn_8"><sup>8</sup>. 博克《曼涅托与天狼星周期》，p85，将其修正为2046年。<a href="#reffn_8" title="Jump back to footnote [8] in the text."> &#8617;</a></blockquote><blockquote id="fn_9"><sup>9</sup>. 梅斯特拉伊姆（Mestraïm）：旧约创世纪X.6中的米兹拉伊姆（Mizraïm）；阿拉伯语中的米斯伦（Miṣrun），楔形文字中的穆斯利（Muṣri），米斯里（Miṣri）。“Mizraïm”是一个双音节合成词，可能与埃及本土的两个主要区域——上、下埃及有关。<a href="#reffn_9" title="Jump back to footnote [9] in the text."> &#8617;</a></blockquote><blockquote id="fn_*"><sup>*</sup>. “埃塞俄比亚”应该指努比亚地区（译者注）。<a href="#reffn_*" title="Jump back to footnote [*] in the text."> &#8617;</a></blockquote><blockquote id="fn_10"><sup>10</sup>. 关于埃及当时存在的许多小王国，见皮安希石碑，布雷斯特《古代记录》，IV，§§ 830,878，并且阿尔塔帕努斯的文章《关于犹太人》，引用于p73 n.3. T·尼克林（在他的《埃及年表研究》，1928-29,p39）中说：“曼涅托的王朝并不是全埃及的统治者的名单，而一部分是或多或少独立的诸侯，一部分是后来涌现出来的统治全埃及的家族。（参考苏格兰斯图亚特王朝或是汉诺威选帝侯），有些仅仅是宫殿中的市长或是独立地位不稳定的小诸侯，甚至是更下级的诺姆长，然而，后来的君主就是从他们那里传下来的。（参考英格兰七王国）”<a href="#reffn_10" title="Jump back to footnote [10] in the text."> &#8617;</a></blockquote><blockquote id="fn_11"><sup>11</sup>. 前见附录I，p210。<a href="#reffn_11" title="Jump back to footnote [11] in the text."> &#8617;</a></blockquote><blockquote id="fn_12"><sup>12</sup>. 帕诺多鲁斯（395-408 A.D.）和他同时代的安尼亚努斯都是埃及僧侣，他们撰写年表的目的是使迦勒底人和埃及人的体系与犹太人的体系相互协调。帕诺多鲁斯运用了（也许编纂了）《索提斯之书》（附录IV）。<a href="#reffn_12" title="Jump back to footnote [12] in the text."> &#8617;</a></blockquote><blockquote id="fn_13"><sup>13</sup>. 埃格雷戈雷（Ἐγρήγοροι），“守望者，天使”——在《以诺书》，179，指的是那些爱上人类女子的天使。希腊语词Ἐγρήγοροι是对《以诺书》179中的埃兰语词汇的误读。<a href="#reffn_13" title="Jump back to footnote [13] in the text."> &#8617;</a></blockquote>]]></content>
    
    
    <summary type="html">曼涅托《埃及史》残卷。洛布古典丛书，1940。哈佛大学出版社，剑桥(马萨诸塞)。本书属于公共领域。</summary>
    
    
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="古代史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/"/>
    
    <category term="埃及" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E5%9F%83%E5%8F%8A/"/>
    
    <category term="1 早王朝(公元前3150-2705年)[第1-2王朝]" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E5%9F%83%E5%8F%8A/1-%E6%97%A9%E7%8E%8B%E6%9C%9D-%E5%85%AC%E5%85%83%E5%89%8D3150-2705%E5%B9%B4-%E7%AC%AC1-2%E7%8E%8B%E6%9C%9D/"/>
    
    
    <category term="渣翻" scheme="https://hiedanoajuu.github.io/tags/%E6%B8%A3%E7%BF%BB/"/>
    
    <category term="古埃及" scheme="https://hiedanoajuu.github.io/tags/%E5%8F%A4%E5%9F%83%E5%8F%8A/"/>
    
    <category term="史书" scheme="https://hiedanoajuu.github.io/tags/%E5%8F%B2%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>平假名寻根——草书书法中的“平假名”</title>
    <link href="https://hiedanoajuu.github.io/2024/08/10/hiragana-in-chinese/"/>
    <id>https://hiedanoajuu.github.io/2024/08/10/hiragana-in-chinese/</id>
    <published>2024-08-10T04:27:00.000Z</published>
    <updated>2024-08-14T02:11:11.022Z</updated>
    
    <content type="html"><![CDATA[<p>平假名想必各位都很熟悉了。平假名是日语使用的一种表音文字，最初是为了写物语与和歌而用。平假名来源于汉字的草书，那么在汉字草书书法作品中，或许就能找到日语平假名的源头吧。下面我们就来看看一些日语片假名的来源。虽说有部分平假名与汉字之间的联系过于抽象，但基本上都还是能在书法作品中找到原型的。</p><h1 id="あ行"><a href="#あ行" class="headerlink" title="あ行"></a>あ行</h1><h2 id="あ"><a href="#あ" class="headerlink" title="あ"></a>あ</h2><p><img src="a.jpg" alt="あ" title="あ"></p><center>[晋]王羲之 《上虞帖》 “安”</center><h2 id="い"><a href="#い" class="headerlink" title="い"></a>い</h2><p><img src="i.jpg" alt="い" title="い"></p><center>[唐]李世民 《淳化阁唐太宗帖》 “以”</center><h2 id="う"><a href="#う" class="headerlink" title="う"></a>う</h2><p><img src="u.jpg" alt="う" title="う"></p><center>[唐]怀素 《草书千字文》 “宇”</center><h2 id="え"><a href="#え" class="headerlink" title="え"></a>え</h2><p><img src="e.jpg" alt="え" title="え"></p><center>[宋]黄庭坚 《廉颇蔺相如列传》 “衣”</center><h2 id="お"><a href="#お" class="headerlink" title="お"></a>お</h2><p><img src="o.jpg" alt="お" title="お"></p><center>[唐]张旭 《李青莲序》 “於(于)”</center><h1 id="か行"><a href="#か行" class="headerlink" title="か行"></a>か行</h1><h2 id="か"><a href="#か" class="headerlink" title="か"></a>か</h2><p><img src="ka.jpg" alt="か" title="か"></p><center>[宋]文天祥 《谢昌元座右自警辞》 “加”</center><h2 id="き"><a href="#き" class="headerlink" title="き"></a>き</h2><p><img src="ki.jpg" alt="き" title="き"></p><center>[唐]张旭 《李青莲序》 “幾(几)”</center><h2 id="く"><a href="#く" class="headerlink" title="く"></a>く</h2><p><img src="ku.jpg" alt="く" title="く"></p><center>[晋]王羲之 《知宝帖》 “久”</center><h2 id="け"><a href="#け" class="headerlink" title="け"></a>け</h2><p><img src="ke.jpg" alt="け" title="け"></p><center>[晋]王羲之 《一朝帖》 “計(计)”</center><h2 id="こ"><a href="#こ" class="headerlink" title="こ"></a>こ</h2><p><img src="ko.jpg" alt="こ" title="こ"></p><center>[宋]文天祥 《谢昌元座右自警辞》 “己”</center><h1 id="さ行"><a href="#さ行" class="headerlink" title="さ行"></a>さ行</h1><h2 id="さ"><a href="#さ" class="headerlink" title="さ"></a>さ</h2><p><img src="sa.jpg" alt="さ" title="さ"></p><center>[晋]王献之 《近与铁石帖》 “左”</center><h2 id="し"><a href="#し" class="headerlink" title="し"></a>し</h2><p><img src="si.jpg" alt="し" title="し"></p><center>[晋]王羲之 《其书帖》 “之”</center><h2 id="す"><a href="#す" class="headerlink" title="す"></a>す</h2><p><img src="su.jpg" alt="す" title="す"></p><center>[明]王铎 《自作诗十首》 “寸”</center><h2 id="せ"><a href="#せ" class="headerlink" title="せ"></a>せ</h2><p><img src="se.jpg" alt="せ" title="せ"></p><center>[唐]怀素 《圣母帖》 “世”</center><h2 id="そ"><a href="#そ" class="headerlink" title="そ"></a>そ</h2><p><img src="so.jpg" alt="そ" title="そ"></p><center>[唐]怀素 《自叙帖》 “曽(曾)”</center><h1 id="た行"><a href="#た行" class="headerlink" title="た行"></a>た行</h1><h2 id="た"><a href="#た" class="headerlink" title="た"></a>た</h2><p><img src="ta.jpg" alt="た" title="た"></p><center>[唐]张旭 《李青莲序》 “太”</center><h2 id="ち"><a href="#ち" class="headerlink" title="ち"></a>ち</h2><p><img src="chi.jpg" alt="ち" title="ち"></p><center>[晋]王羲之 《中郎帖》 “知”</center><h2 id="つ"><a href="#つ" class="headerlink" title="つ"></a>つ</h2><p><img src="tsu.jpg" alt="つ" title="つ"></p><center>[明]宋客 《进学解》 “川”</center><h2 id="て"><a href="#て" class="headerlink" title="て"></a>て</h2><p><img src="te.jpg" alt="て" title="て"></p><center>[唐]张旭 《李青莲序》 “天”</center><h2 id="と"><a href="#と" class="headerlink" title="と"></a>と</h2><p><img src="so.jpg" alt="と" title="と"></p><center>[唐]怀素 《四十二章经》 “止”</center><h1 id="な行"><a href="#な行" class="headerlink" title="な行"></a>な行</h1><h2 id="な"><a href="#な" class="headerlink" title="な"></a>な</h2><p><img src="na.jpg" alt="な" title="な"></p><center>[晋]谢安 《中郎帖》 “奈”</center><h2 id="に"><a href="#に" class="headerlink" title="に"></a>に</h2><p><img src="ni.jpg" alt="に" title="に"></p><center>[晋]王献之 《玄度帖》 “仁”</center><h2 id="ぬ"><a href="#ぬ" class="headerlink" title="ぬ"></a>ぬ</h2><p><img src="nu.jpg" alt="ぬ" title="ぬ"></p><center>[晋]王羲之 《大佳忧卿帖》 “奴”</center><h2 id="ね"><a href="#ね" class="headerlink" title="ね"></a>ね</h2><p><img src="ne.png" alt="ね" title="ね"></p><center>毛泽东 “祢”</center><h2 id="の"><a href="#の" class="headerlink" title="の"></a>の</h2><p><img src="no.jpg" alt="の" title="の"></p><center>[唐]怀素 《四十二章经》 “乃”</center><h1 id="は行"><a href="#は行" class="headerlink" title="は行"></a>は行</h1><h2 id="は"><a href="#は" class="headerlink" title="は"></a>は</h2><p><img src="ha.jpg" alt="は" title="は"></p><center>[明]文徵明 《早朝诗》 “波”</center><h2 id="ひ"><a href="#ひ" class="headerlink" title="ひ"></a>ひ</h2><p><img src="hi.jpg" alt="ひ" title="ひ"></p><center>[唐]孙过庭 《景福殿赋》 “比”</center><h2 id="ふ"><a href="#ふ" class="headerlink" title="ふ"></a>ふ</h2><p><img src="fu.jpg" alt="ふ" title="ふ"></p><center>[汉]张芝 《冠军帖》 “不”</center><h2 id="へ"><a href="#へ" class="headerlink" title="へ"></a>へ</h2><p><img src="he.jpg" alt="へ" title="へ"></p><center>[唐]怀素 《自叙帖》 “部”</center><h2 id="ほ"><a href="#ほ" class="headerlink" title="ほ"></a>ほ</h2><p><img src="ho.jpg" alt="ほ" title="ほ"></p><center>[晋]王羲之 《龙保帖》 “保”</center><h1 id="ま行"><a href="#ま行" class="headerlink" title="ま行"></a>ま行</h1><h2 id="ま"><a href="#ま" class="headerlink" title="ま"></a>ま</h2><p><img src="ma.jpg" alt="ま" title="ま"></p><center>[晋]王羲之 《上虞帖》 “末”</center><h2 id="み"><a href="#み" class="headerlink" title="み"></a>み</h2><p><img src="mi.jpg" alt="み" title="み"></p><center>[明]陈道复 《古诗十九首》 “美”</center><h2 id="む"><a href="#む" class="headerlink" title="む"></a>む</h2><p><img src="mu.jpg" alt="む" title="む"></p><center>[唐]怀素 《草书千字文》 “武”</center><h2 id="め"><a href="#め" class="headerlink" title="め"></a>め</h2><p><img src="me.jpg" alt="め" title="め"></p><center>[晋]王羲之 《中郎女帖》 “女”</center><h2 id="も"><a href="#も" class="headerlink" title="も"></a>も</h2><p><img src="mo.jpg" alt="も" title="も"></p><center>[明]王铎 《今夕行村外》 “毛”</center><h1 id="や行"><a href="#や行" class="headerlink" title="や行"></a>や行</h1><h2 id="や"><a href="#や" class="headerlink" title="や"></a>や</h2><p><img src="ya.jpg" alt="や" title="や"></p><center>[晋]王献之 《省前书帖》 “也”</center><h2 id="ゆ"><a href="#ゆ" class="headerlink" title="ゆ"></a>ゆ</h2><p><img src="yu.jpg" alt="ゆ" title="ゆ"></p><center>[唐]孙过庭 《书谱》 “由”</center><h2 id="𛀁"><a href="#𛀁" class="headerlink" title="𛀁"></a>𛀁</h2><p><img src="ye.jpg" alt="𛀁" title="𛀁"></p><center>[唐]怀素 《秋兴八首》 “江”</center><h2 id="よ"><a href="#よ" class="headerlink" title="よ"></a>よ</h2><p><img src="yo.jpg" alt="よ" title="よ"></p><center>[元]康里巎巎 《致彦中尺牍》 “与”</center><h1 id="ら行"><a href="#ら行" class="headerlink" title="ら行"></a>ら行</h1><h2 id="ら"><a href="#ら" class="headerlink" title="ら"></a>ら</h2><p><img src="ra.jpg" alt="ら" title="ら"></p><center>[唐]怀素 《大草千字文》 “良”</center><h2 id="り"><a href="#り" class="headerlink" title="り"></a>り</h2><p><img src="ri.jpg" alt="り" title="り"></p><center>[唐]孙过庭 《书谱》 “利”</center><h2 id="る"><a href="#る" class="headerlink" title="る"></a>る</h2><p><img src="ru.jpg" alt="る" title="る"></p><center>[唐]孙过庭 《书谱》 “留”</center><h2 id="れ"><a href="#れ" class="headerlink" title="れ"></a>れ</h2><p><img src="re.jpg" alt="れ" title="れ"></p><center>[唐]怀素 《自叙帖》 “礼”</center><h2 id="ろ"><a href="#ろ" class="headerlink" title="ろ"></a>ろ</h2><p><img src="ro.jpg" alt="ろ" title="ろ"></p><center>[元]邓文原 《书谱》 “呂(吕)”</center><h1 id="わ行"><a href="#わ行" class="headerlink" title="わ行"></a>わ行</h1><h2 id="わ"><a href="#わ" class="headerlink" title="わ"></a>わ</h2><p><img src="wa.jpg" alt="わ" title="わ"></p><center>[晋]王献之 《奉别贴》 “和”</center><h2 id="ゐ"><a href="#ゐ" class="headerlink" title="ゐ"></a>ゐ</h2><p><img src="wi.jpg" alt="ゐ" title="ゐ"></p><center>[汉]蔡琰 《胡笳帖》 “爲(为)”</center><h2 id="ゑ"><a href="#ゑ" class="headerlink" title="ゑ"></a>ゑ</h2><p><img src="we.jpg" alt="ゑ" title="ゑ"></p><center>[元]邓文原 《急就章》 “恵(惠)”</center><h2 id="を"><a href="#を" class="headerlink" title="を"></a>を</h2><p><img src="wo.jpg" alt="を" title="を"></p><center>[唐]怀素 《自叙帖》 “遠(远)”</center><h1 id="ん"><a href="#ん" class="headerlink" title="ん"></a>ん</h1><p><img src="n.jpg" alt="ん" title="ん"></p><center>[明]王铎 《临唐太宗帖》 “無(无)”</center><h1 id="一些统计"><a href="#一些统计" class="headerlink" title="一些统计"></a>一些统计</h1>    <div id="echarts3136" style="width: 85%;height: 400px;margin: 0 auto"></div>    <script src="https://cdn.jsdelivr.net/npm/echarts@4.9.0/dist/echarts.min.js"></script>    <script type="text/javascript">            // 基于准备好的dom，初始化echarts实例            var myChart = echarts.init(document.getElementById('echarts3136'));            // 指定图表的配置项和数据            var option = {    title: {        text: '书法家贡献统计图(三次以上)'    },    tooltip: {},    legend: {        data:['贡献']    },    xAxis: {        data: ["怀素","王羲之","孙过庭","王献之","张旭","王铎"]    },    yAxis: {},    series: [{        name: '贡献',        type: 'bar',        data: [11, 9, 4, 4, 4, 3]    }]};            // 使用刚指定的配置项和数据显示图表。            myChart.setOption(option);    </script>        <div id="echarts6720" style="width: 85%;height: 400px;margin: 0 auto"></div>    <script src="https://cdn.jsdelivr.net/npm/echarts@4.9.0/dist/echarts.min.js"></script>    <script type="text/javascript">            // 基于准备好的dom，初始化echarts实例            var myChart = echarts.init(document.getElementById('echarts6720'));            // 指定图表的配置项和数据            var option = {    title: {        text: '朝代变化统计图'    },    tooltip: {},    legend: {        data:['贡献']    },    xAxis: {        data: ["汉","晋","唐","宋","元","明","清及以后"]    },    yAxis: {},    series: [{        name: '贡献',        type: 'line',        data: [2, 14, 20, 3, 3, 6, 1]    }]};            // 使用刚指定的配置项和数据显示图表。            myChart.setOption(option);    </script>    <h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>平假名作为日语重要的表音符号，有着深远的历史。平假名由汉字的草书演变而来，从中我们便能一窥古代中日文化交流的情况。</p>]]></content>
    
    
    <summary type="html">寻找汉字草书书法中的“平假名”</summary>
    
    
    
    <category term="杂项" scheme="https://hiedanoajuu.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="书法" scheme="https://hiedanoajuu.github.io/tags/%E4%B9%A6%E6%B3%95/"/>
    
    <category term="文化" scheme="https://hiedanoajuu.github.io/tags/%E6%96%87%E5%8C%96/"/>
    
    <category term="日语" scheme="https://hiedanoajuu.github.io/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>博丽神社及大结界管理委员会 人类村落居民委员会讣告 稗田阿求同志逝世</title>
    <link href="https://hiedanoajuu.github.io/2024/08/07/akyuu/"/>
    <id>https://hiedanoajuu.github.io/2024/08/07/akyuu/</id>
    <published>2024-08-06T16:00:00.000Z</published>
    <updated>2024-08-08T14:53:45.829Z</updated>
    
    <content type="html"><![CDATA[<p><img src="akyuu.jpg" alt="稗田阿求同志遗像" title="稗田阿求同志遗像"></p><center>稗田阿求同志遗像</center><center>稗田阿求同志の遺影</center><center>稗田阿求同志ノ遺影</center><p><strong>《文文。新闻》编辑部幻想乡8月7日电</strong>  博丽神社及大结界管理委员会、人类村落居民委员会沉痛宣告：人类村落名门「稗田家」当家，第九代”御阿礼之子”，杰出的史学家、作家，幻想乡优秀教师，「幻想乡的记忆」稗田阿求 同志，因突发心脏病，经全力抢救无效，于2024年8月7日(第百卅九季文月之一 周三)0时0分在稗田邸逝世，享年30岁。</p><p><strong>《文々。新聞》編集部幻想郷8月7日电</strong>　博麗神社と大結界管理委員会、人間の里住民委員会は沈痛な宣告をしました: 人間の里の名門「稗田家」当主、九代目《御阿礼の子》、優れた歴史家と作家、幻想郷の優秀な教師、《幻想郷の記憶》 稗田阿求同志は、突発性心臓病のため、全力で救助したが効果がなく、2024年8月7日（第百卅九季文月第一水曜日）0時0分に稗田坻で逝去した。享年30歳。</p><p><strong>《文々。新聞》編集部幻想郷8月7日电</strong>  博麗神社ト大結界管理委員会、人間ノ里住民委員会、沈痛ニ宣告ス：人間ノ里ノ名门「稗田家」当主、九代目《御阿礼ノ子》、傑出ノ史家ト作家、幻想郷ノ優秀教師、《幻想郷ノ記憶》　稗田阿求同志、心痛発シ、治療効ナク、百三十九季文月ノ第一水曜日ノ子正ニ稗田邸ニテ逝去ス。享年三十。</p>]]></content>
    
    
    <summary type="html">博麗神社と大結界管理委員会 人間の里住民委員会　稗田阿求同志逝去の訃報</summary>
    
    
    
    <category term="杂项" scheme="https://hiedanoajuu.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="东方" scheme="https://hiedanoajuu.github.io/tags/%E4%B8%9C%E6%96%B9/"/>
    
    <category term="新闻" scheme="https://hiedanoajuu.github.io/tags/%E6%96%B0%E9%97%BB/"/>
    
  </entry>
  
  <entry>
    <title>罗塞塔石碑:古希腊语部分翻译</title>
    <link href="https://hiedanoajuu.github.io/2024/06/20/rosetta-stone-translation-greek/"/>
    <id>https://hiedanoajuu.github.io/2024/06/20/rosetta-stone-translation-greek/</id>
    <published>2024-06-20T07:13:06.000Z</published>
    <updated>2025-01-05T05:17:26.908Z</updated>
    
    <content type="html"><![CDATA[<p><img src="rosetta-stone.jpg" alt="罗塞塔石碑" title="罗塞塔石碑"></p><ol><li><p>继承了父亲王位的，年轻的，最光荣的，埃及的建立者，虔心</p></li><li><p>向着众神，敌人的战胜者，人们文明生活的恢复者，三十年庆典<sup><a href="#fn_1" id="reffn_1">1</a></sup>之主，如伟大的赫菲斯托斯<sup><a href="#fn_2" id="reffn_2">2</a></sup>一般，一个太阳<sup><a href="#fn_3" id="reffn_3">3</a></sup>般的国王，</p></li><li><p>上下埃及的大王<sup><a href="#fn_4" id="reffn_4">4</a></sup>，爱父神的后代，赫菲斯托斯认可的人之一，太阳赐予胜利的人，活生生的宙斯<sup><a href="#fn_5" id="reffn_5">5</a></sup>，太阳之子，永生的，受普塔眷恋的托勒密</p></li><li><p>的统治之下的第九年，阿埃托斯之子阿埃托斯为亚历山大、救主神、姐弟神、施惠神、爱父神<sup><a href="#fn_6" id="reffn_6">6</a></sup>与</p></li><li><p>神显者的祭司，菲利诺斯之女皮拉为贝勒尼基「施惠者」的阿特洛福罗斯<sup><a href="#fn_7" id="reffn_7">7</a></sup>，第欧根尼之女阿莉亚为阿尔西诺伊「爱姐弟者」的卡内弗罗斯<sup><a href="#fn_8" id="reffn_8">8</a></sup>，托勒密之女伊琳妮</p></li><li><p>为阿尔西诺伊「爱父者」的女祭司<sup><a href="#fn_9" id="reffn_9">9</a></sup>，在桑迪科斯月<sup><a href="#fn_10" id="reffn_10">10</a></sup>4日，据埃及历法为梅基尔月<sup><a href="#fn_11" id="reffn_11">11</a></sup>18日。谕旨。祭司长、先知和神殿内殿为</p></li><li><p>众神更衣者、持扇者、圣书吏和所有其他的自全国各地神殿来孟斐斯见国王的祭司皆聚集于此，参加永生的，</p></li><li><p>受普塔眷恋的，显赫的神显者，继承他父亲王位的托勒密安排的盛宴。他们这天齐聚在孟斐斯的神殿，一齐宣布：</p></li><li><p>鉴于永生的，受普塔眷恋的，显赫的神显者，「爱父神」托勒密国王与阿尔西诺伊女王之子，托勒密国王已成为神殿与</p></li><li><p>栖身神殿之人以及他的所有臣民的恩人，成为一对男神与女神结合而诞生的神(就像伊西斯与奥西里斯之子，为他父亲报仇雪恨的荷鲁斯)<sup><a href="#fn_12" id="reffn_12">12</a></sup>，(并且)仁慈地心向</p></li><li><p>神明，已将钱谷税收献给了神殿，并且承担了神殿的大量开支，以使埃及走向繁荣，建立新的神殿，</p></li><li><p>并且他毫不吝惜自己的所有金钱，在埃及征收的各种税款，有的被他完全免除，有的被他减轻，以便让所有人在他的统治下都能过得</p></li><li><p>欣欣向荣，埃及和王国其他地方的人欠国王许多债，却都被他免除了；那些坐牢的和控告很久的人，</p></li><li><p>却都被他释放了；他还指示道诸神将继续享受神殿的收入与每年给予他们的津贴，包括</p></li><li><p>谷物与金钱，同样地，他还指示诸神从葡萄园、菜园以及其他在他父亲时代属于诸神的财产中获得收入。</p></li><li><p>他又带着对祭司的尊重指示道，祭司们不需要再为了祭司职分像从他父亲统治期间直到他统治的第一年那样缴纳为他们安排的税款，他还使神职人员</p></li><li><p>不用每年都要赶到亚历山大里亚；他还指示不得再强征海军；并且神殿需向国王缴纳的亚麻布<sup><a href="#fn_13" id="reffn_13">13</a></sup>税也被他</p></li><li><p>免除了三分之二；他使得整个国家百废俱兴，注重以适当的方式向众神履行传统职责</p></li><li><p>同样地，他还公正地对待每一个人，就像是伟大的赫尔墨斯<sup><a href="#fn_14" id="reffn_14">14</a></sup>；他还规定了解甲归乡的战士，以及其他在动乱时期<sup><a href="#fn_15" id="reffn_15">15</a></sup></p></li><li><p>遭到苦难的人，允许他们在返乡时占有他们原先的财产；他下令派遣骑兵、步兵和战舰抵御那些从陆路和海路</p></li><li><p>入侵埃及的人，他还拨出了大量的金钱与粮食，以保证神殿和所有生活在这片土地上的人们的安全；还</p></li><li><p>去了布西里特省的利科波利斯，这座城被叛军占据，并抵挡住了我军的一轮围攻，叛军兵革坚利，物资充裕(因为聚集</p></li><li><p>在那里的不敬神明的人久已心怀不满，他们还多次毁坏神殿，伤害埃及的百姓)，并且</p></li><li><p>安营围攻这座城，还用土堆、壕沟和精心设计的堡垒将其包围；尼罗河在(他统治的)第八年泛滥时，这样通常会淹没</p></li><li><p>平原，但他通过在许多水道的泄洪点筑坝阻止了这样的惨剧的发生(在这上面花费了不少钱)，并且安排骑兵和步兵守卫</p></li><li><p>它们，他在很短的时间内像暴风一样攻占了这座城镇，消灭了城内所有不敬神明的人，就像赫尔墨斯和荷鲁斯——伊西斯和奥西里斯的儿子以前镇压这片地区的叛军<sup><a href="#fn_16" id="reffn_16">16</a></sup></p></li><li><p>一样，至于那些在他父亲时代纠集叛军、为非作歹、破坏神庙的人，国王亲赴孟斐斯为他的父亲和他自己的王位雪耻。</p></li><li><p>让他们所有人都得到了应得的惩罚，这时他来到这里举行了正式的加冕仪式；他还免除了</p></li><li><p>神殿直到他统治的第八年的赋税，一笔数量可观的谷物与金钱；还有未将亚麻布上交王室的</p></li><li><p>罚金以及那些以及需要上交给王室的布料，同时也免除了核查税收的费用；他还免除了神殿每一阿鲁拉<sup><a href="#fn_17" id="reffn_17">17</a></sup>的神圣土地的一阿塔贝<sup><a href="#fn_18" id="reffn_18">18</a></sup>的赋税，并且同样</p></li><li><p>免除了每阿鲁拉的葡萄园的一罐酒的赋税；他还将大量供品赠予阿比斯和姆奈维斯<sup><a href="#fn_19" id="reffn_19">19</a></sup>和埃及其他的神兽，因为他比历代先王对众神的东西考虑得都更加周到；</p></li><li><p>他还慷慨大方地为它们的葬礼提供了大量合适的用品，还定期向它们的专门的神龛捐款，并且举行了祭祀、节日和其他传统仪式；</p></li><li><p>并且他依据律法，维护着神殿和整个埃及的尊荣；他花费大量金银宝石将阿比斯的神殿</p></li><li><p>好好装饰了一番；他还建立了许多神殿、神龛和祭坛，并且修好了那些失修的，在宗教事务上展现出了一位慈爱的神明般的</p></li><li><p>精神；经询问，他还在他统治的期间重建了最华贵的神殿，这是十分得当的；作为回报，众神赐予他健康、胜利与力量，以及其他一切美好的事物，</p></li><li><p>并且他和他的子孙将永远保有王位。吉祥如意：这片土地上的所有神殿的每一位祭司都下定决心为永生的，受普塔眷恋的，「神显者」</p></li><li><p>如他父母「爱父神」、祖宗「施惠神」「姐弟神」「救主神」一般的国王托勒密增光添彩，</p></li><li><p>并在每座神殿最显眼的地方为永生的，受普塔眷恋的，「神显者」立一个塑像，</p></li><li><p>这个塑像将被称作「托勒密，埃及的守护者」，旁边立着神庙的主神，交给他胜利的武器<sup><a href="#fn_20" id="reffn_20">20</a></sup>，所有的一切都将以(埃及的)时尚的风格</p></li><li><p>进行制造；祭司们应当一天三次向神像致敬，给祂们穿上神圣的衣装，执行其他通常的圣事，比如在埃及的节日为其他神明献上</p></li><li><p>祭品；并为国王托勒密「神显者」，国王托勒密和阿尔西诺伊「爱父神」的后人，在每座</p></li><li><p>神殿里都建立一座雕像和一尊黄金神龛，并将它与其他神龛一起设置在内室中；盛大的节日中，游行的队伍会抬着神龛，「神显者」的神龛也和它们一起被抬着。</p></li><li><p>以示区分，国王的十个金冠要放在神龛上，其上还应加上一个蛇形<sup><a href="#fn_21" id="reffn_21">21</a></sup>标记，但不是</p></li><li><p>其他神龛上那样的蛇形冠冕，在它们的中心还要放上一顶红白双冠<sup><a href="#fn_22" id="reffn_22">22</a></sup>，这是他在孟斐斯神殿</p></li><li><p>举行登基大典时戴上的王冠;在王冠周围的正方形表面上，在前面所提到的王冠的旁边，金色的符号(用八个数字表示)，</p></li><li><p>这是让上下两国熠熠生辉的国王(的神龛)。因为梅索尔<sup><a href="#fn_23" id="reffn_23">23</a></sup>月30日是国王庆生的日子，相应的</p></li><li><p>(法奥菲<sup><a href="#fn_24" id="reffn_24">24</a></sup>月17日)是他继承他父亲王位的日子，所以他们在神殿中把这两天作为纪念日，因为它们是一切伟大幸事之源；又下旨全埃及的神殿都要保留在每个月的</p></li><li><p>这两天举行节日的的传统，在节日期间举行献祭和奠酒仪式，并照其他节日的惯例举行各类典礼(并且要将祭品交给神殿中)</p></li><li><p>供职的祭司。还将保留为永生的，受普塔眷恋的，「神显者」国王托勒密，每年在</p></li><li><p>这片土地上的所有神殿从托特<sup><a href="#fn_25" id="reffn_25">25</a></sup>月1日起举行为期五天的节日的传统，在这个节日，他们要带上花环，为神明献上与祭品和美酒并举行其他常规的活动，(每个神殿的)祭司</p></li><li><p>除了他们所侍奉的神明外还要被称为「神显者」的祭司；并且他的神职还要以这种形式登记在一切正式的文档里(并镌刻在他们所佩戴的指环上)；</p></li><li><p>也允许个人保留这一节日，在家中设立上述神明的神龛，每年举行上述庆祝</p></li><li><p>活动，以使埃及的众人知道赞美与崇敬「神显者」国王，依据法律如上。这谕旨要以圣书体[象形文字]和世俗体和希腊文刻在硬石碑</p></li><li><p>上，并且安放在第一、第二、第三[级]神殿的永生的国王的像旁。</p></li></ol><blockquote id="fn_1"><sup>1</sup>. 赫卜赛德节在国王加冕三十年后每四年举行一次，以恢复国王的体力。<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote><blockquote id="fn_2"><sup>2</sup>. 埃及语版本为普塔。<a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a></blockquote><blockquote id="fn_3"><sup>3</sup>. 埃及语版本为拉。<a href="#reffn_3" title="Jump back to footnote [3] in the text."> &#8617;</a></blockquote><blockquote id="fn_4"><sup>4</sup>. 埃及的南北部，两个伟大的前王朝时期的王国，作为国王的头衔用以纪念。<a href="#reffn_4" title="Jump back to footnote [4] in the text."> &#8617;</a></blockquote><blockquote id="fn_5"><sup>5</sup>. 古埃及语版本为阿蒙。<a href="#reffn_5" title="Jump back to footnote [5] in the text."> &#8617;</a></blockquote><blockquote id="fn_6"><sup>6</sup>. 亚历山大「大帝」、托勒密一世、贝勒尼基一世、托勒密二世、阿尔西诺伊二世、托勒密三世、贝勒尼基二世、托勒密四世与阿尔西诺伊三世的敬称。<a href="#reffn_6" title="Jump back to footnote [6] in the text."> &#8617;</a></blockquote><blockquote id="fn_7"><sup>7</sup>. Athlophoros，女祭司的头衔，意为持奖品者(译者注)。<a href="#reffn_7" title="Jump back to footnote [7] in the text."> &#8617;</a></blockquote><blockquote id="fn_8"><sup>8</sup>. Kanephoros，意为持篮者(译者注)。<a href="#reffn_8" title="Jump back to footnote [8] in the text."> &#8617;</a></blockquote><blockquote id="fn_9"><sup>9</sup>. 齐名的祭司；男女祭司，总是使用希腊名，是国王崇拜的重要组成部分，在他们的岗位上效力了一年后被安排在两个完全希腊式的学院中。<a href="#reffn_9" title="Jump back to footnote [9] in the text."> &#8617;</a></blockquote><blockquote id="fn_10"><sup>10</sup>. Xandikos，古马其顿历法的六月，大致对应公历的三月(译者注)。<a href="#reffn_10" title="Jump back to footnote [10] in the text."> &#8617;</a></blockquote><blockquote id="fn_11"><sup>11</sup>. Mekhir，古埃及历法的八月，大致对应公历的2月20日到3月21日(译者注)。<a href="#reffn_11" title="Jump back to footnote [11] in the text."> &#8617;</a></blockquote><blockquote id="fn_12"><sup>12</sup>. 荷鲁斯，父亲的复仇者，在希腊被称为哈伦多特斯。<a href="#reffn_12" title="Jump back to footnote [12] in the text."> &#8617;</a></blockquote><blockquote id="fn_13"><sup>13</sup>. 精细的亚麻布。<a href="#reffn_13" title="Jump back to footnote [13] in the text."> &#8617;</a></blockquote><blockquote id="fn_14"><sup>14</sup>. 埃及语版本为托特。<a href="#reffn_14" title="Jump back to footnote [14] in the text."> &#8617;</a></blockquote><blockquote id="fn_15"><sup>15</sup>. 指公元前205年以来，上埃及由两个反叛的本地法老控制的时期，第一个是霍-文内弗(先前被误读为霍-埃姆-阿赫特)，另一个是公元前199年开始统治的安赫-文内弗(被误读为安赫-埃姆-阿赫特)。<a href="#reffn_15" title="Jump back to footnote [15] in the text."> &#8617;</a></blockquote><blockquote id="fn_16"><sup>16</sup>. 根据奥西里斯传说的一个版本，荷鲁斯和托特带领着两人的追随者在赫尔莫波利斯帕尔瓦击败了塞特的支持者。<a href="#reffn_16" title="Jump back to footnote [16] in the text."> &#8617;</a></blockquote><blockquote id="fn_17"><sup>17</sup>. 土地计量单位，大致相当于2/3英亩(约2,735平方米)。<a href="#reffn_17" title="Jump back to footnote [17] in the text."> &#8617;</a></blockquote><blockquote id="fn_18"><sup>18</sup>. 谷物计量单位，大致相当于38-40升(译者注)。<a href="#reffn_18" title="Jump back to footnote [18] in the text."> &#8617;</a></blockquote><blockquote id="fn_19"><sup>19</sup>. 阿比斯和姆奈维斯都是古埃及多神崇拜中的圣牛(译者注)。<a href="#reffn_19" title="Jump back to footnote [19] in the text."> &#8617;</a></blockquote><blockquote id="fn_20"><sup>20</sup>. 赫帕什(Khepesh)，亦称弯刀，常被描述为神明赐予国王的皇家武器。<a href="#reffn_20" title="Jump back to footnote [20] in the text."> &#8617;</a></blockquote><blockquote id="fn_21"><sup>21</sup>. 眼镜蛇，王权的象征。<a href="#reffn_21" title="Jump back to footnote [21] in the text."> &#8617;</a></blockquote><blockquote id="fn_22"><sup>22</sup>. 来源于埃及语Pa-sekhemty，双冠象征着上、下埃及的两部分王权，结合了下埃及的红冠和上埃及的白冠。<a href="#reffn_22" title="Jump back to footnote [22] in the text."> &#8617;</a></blockquote><blockquote id="fn_23"><sup>23</sup>. Mesore，古埃及历法的十二月，大致对应公历的8月7日至9月5日(译者注)。 <a href="#reffn_23" title="Jump back to footnote [23] in the text."> &#8617;</a></blockquote><blockquote id="fn_24"><sup>24</sup>. Paophi，古埃及历法的二月，大致对应公历的10月11日至11月9日(译者注)。<a href="#reffn_24" title="Jump back to footnote [24] in the text."> &#8617;</a></blockquote><blockquote id="fn_25"><sup>25</sup>. Thoth，古埃及历法的一月，大致对应公历的8月29日至9月27日(译者注)。<a href="#reffn_25" title="Jump back to footnote [25] in the text."> &#8617;</a></blockquote>]]></content>
    
    
    <summary type="html">罗塞塔石碑希腊语部分翻译，原文https://sourcebooks.fordham.edu/ancient/asbook04.asp</summary>
    
    
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="古代史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/"/>
    
    <category term="埃及" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E5%9F%83%E5%8F%8A/"/>
    
    <category term="5 后王国时代(公元前1070-332年)[第21-31王朝]" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E5%9F%83%E5%8F%8A/5-%E5%90%8E%E7%8E%8B%E5%9B%BD%E6%97%B6%E4%BB%A3-%E5%85%AC%E5%85%83%E5%89%8D1070-332%E5%B9%B4-%E7%AC%AC21-31%E7%8E%8B%E6%9C%9D/"/>
    
    
    <category term="渣翻" scheme="https://hiedanoajuu.github.io/tags/%E6%B8%A3%E7%BF%BB/"/>
    
    <category term="古埃及" scheme="https://hiedanoajuu.github.io/tags/%E5%8F%A4%E5%9F%83%E5%8F%8A/"/>
    
    <category term="石碑" scheme="https://hiedanoajuu.github.io/tags/%E7%9F%B3%E7%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>北美之行</title>
    <link href="https://hiedanoajuu.github.io/2024/01/20/Voyage-to-North-America/"/>
    <id>https://hiedanoajuu.github.io/2024/01/20/Voyage-to-North-America/</id>
    <published>2024-01-20T06:44:05.000Z</published>
    <updated>2024-04-30T13:55:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>乔瓦尼·卡博托</strong><sup><a href="#fn_1" id="reffn_1">1</a></sup> (意大利语:Giovanni Caboto)，生于热那亚。虽是威尼斯公民，但于1496年从英国国王亨利七世那里获得了探索新大陆的专利状。</p><p>他于1497年穿越大西洋并抵达美洲大陆——可能是拉布拉多海岸。以下三份记录包含了来自当时的证人的所有证据，这些证据中的信息或许来自乔瓦尼·卡博托本人，本文摘自哈克路特学会版本的《哥伦布日记》。</p><h1 id="洛伦佐·帕斯夸里戈给他的兄弟阿尔韦塞和弗朗切斯科的信2"><a href="#洛伦佐·帕斯夸里戈给他的兄弟阿尔韦塞和弗朗切斯科的信2" class="headerlink" title="洛伦佐·帕斯夸里戈给他的兄弟阿尔韦塞和弗朗切斯科的信2"></a>洛伦佐·帕斯夸里戈给他的兄弟阿尔韦塞和弗朗切斯科的信<sup><a href="#fn_2" id="reffn_2">2</a></sup></h1><p>伦敦，1497年8月23日。</p><p>我们乘船从布里斯托尔出发寻找新岛屿的威尼斯人已经回来了，声称自己发现了700里格<sup><a href="#fn_3" id="reffn_3">3</a></sup>之外的大汗的国家所在的大陆，并且沿着海岸航行了300里格，接着靠岸，但并没有看见一个人。但他给国王带来了一些用来捕捉猎物的陷阱和一根织网的针，此外他还发现了一些有缺口的树，由此判断那里有居民。心存疑虑的他回到船上。这时他已经出海三个月了，这是毫无疑问的。在归途中，他看见右边有两个小岛，但他并不想靠岸，以免因缺少粮食而浪费时间。国王对此十分满意。他说那里的潮汐很松弛，不会像这里一样形成洋流。国王再一次答应了，将他要求的十艘武装船只交给他，并且按照他的要求将把所有的囚犯，除了那些因叛国罪而被监禁的人，都交给了他，还给了他钱供他在再次远航前消遣。与此同时，他和他的威尼斯妻子和儿子们在布里斯托尔。他名叫约翰·塔博特<sup><a href="#fn_4" id="reffn_4">4</a></sup>，他也因此被称为“大海军上将”，收获了盛名。他也穿上了华贵的丝绸衣服，英格兰人很乐意追随他，其中有许多人是流氓和恶棍。这座大陆的发现者在地上竖起了一个大十字架，上面有一面英国的旗帜，一面圣马可的旗帜，因为他是威尼斯人;所以我们的国旗已经升到很远的地方了。</p><blockquote id="fn_2"><sup>2</sup>. 出自《国家文件日历》(威尼斯)。<a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a></blockquote><blockquote id="fn_3"><sup>3</sup>. 里格(league)，旧时单位长度，约为5公里。 ——译者注<a href="#reffn_3" title="Jump back to footnote [3] in the text."> &#8617;</a></blockquote><blockquote id="fn_4"><sup>4</sup>. 印刷错误：“卡”误印为“塔”。<a href="#reffn_4" title="Jump back to footnote [4] in the text."> &#8617;</a></blockquote><h1 id="雷蒙多·迪·松奇诺给米兰公爵的第一封急件-节选-5"><a href="#雷蒙多·迪·松奇诺给米兰公爵的第一封急件-节选-5" class="headerlink" title="雷蒙多·迪·松奇诺给米兰公爵的第一封急件(节选)5"></a>雷蒙多·迪·松奇诺给米兰公爵的第一封急件(节选)<sup><a href="#fn_5" id="reffn_5">5</a></sup></h1><p>1497年8月24日。</p><p>几个月后，国王陛下派出一个威尼斯人，他是一个杰出的水手，在发现新岛屿方面非常熟练。他业已安全返航，并且发现了两个又大又肥沃的岛屿。他似乎发现了七个在英格兰向西400里格之外的城市。这些成果使国王陛下立刻考虑派他带十五到二十艘船再度远航。</p><blockquote id="fn_5"><sup>5</sup>. 出自《国家文件日历》(威尼斯)。<a href="#reffn_5" title="Jump back to footnote [5] in the text."> &#8617;</a></blockquote><h1 id="雷蒙多·迪·松奇诺给米兰公爵的第二封急件6"><a href="#雷蒙多·迪·松奇诺给米兰公爵的第二封急件6" class="headerlink" title="雷蒙多·迪·松奇诺给米兰公爵的第二封急件6"></a>雷蒙多·迪·松奇诺给米兰公爵的第二封急件<sup><a href="#fn_6" id="reffn_6">6</a></sup></h1><p>1497年9月18日。</p><p>我最卓越最杰出的领主，<br>或许在阁下卓越的生涯中，了解这位陛下如何在不拔出剑的情况下获得了亚洲的一部分，这并不会让您变得不受欢迎。在这个王国有一位威尼斯人，名为乔瓦尼·卡博托，性情温和，在航海方面非常专业，他看着最平静的葡萄牙和西班牙的国王占领了未知的岛屿，便考虑为这位陛下取得类似的领土。获得了皇家特许状后，该皇家特许状保证他可以使用自己发现的领土，而主权则被保留给王室，他将自己的命运交给了一艘十八名船员的小船，自这个王国西部的港口——布里斯托尔出发。他经过了西边更远的伊比利亚半岛，然后向北航行，接着他开始向东航行，(在几天时间内)又将北极星放在右手边。漫游了很长时间以后，他终于抵达了陆地，在那里他升起了王室的旗帜，并为他的殿下占领了土地，并且，在获得了各种各样的证物以佐证他的发现之后，他开始返航。这位名叫梅塞尔·乔瓦尼的人是个外国穷人，要不是因为几乎全是英格兰人的布里斯托尔的船员为他作证，否则不会有人相信他的。这位梅塞尔·乔瓦尼有一幅世界地图和一个实心球，上面标注了他曾到过的地方。他向东方航行，一直到达了塔纳伊斯国。他们说那里土地优渥，(或许是气候？)气温温和，表示那里生长着红木和丝绸。他们声称那里的海里全是鱼，不仅可以用网捕捉，还可以用篮子捕捉，还要在篮子上绑一块石头以便将其固定在水中。这句话是那个梅塞尔·乔瓦尼说的。</p><p>与他同行的英国人说，他们捕到的鱼实在太多了，以至于这个王国不再需要冰岛了，而冰岛是一个以干鳕贸易著称的国家。这位梅塞尔·乔瓦尼已经有了更高的目标，他认为，在那个地方被占领后，他将继续向东方前进，到达一个名为日本的岛屿，这个岛屿位于赤道地区，他相信，在那里可以找到这个世界上所有的香料和珠宝。他还说，有一次他在麦加，香料由商队从遥远的国家运来；他问他们香料是从哪里运来的，生长在哪里，他们回答说不知道，这些商品是由其他商队从更遥远的国家运到他们那里的；他们还说，香料也是从其他更加遥远的地区运来的。他举出了这样一个论点：如果东方人告诉南方的人这些东西是从离他们很远的地方来的，假设地球是圆的，那么最后一次转弯必然是从北向西。人们说，走这条航线的费用不会比现在更高，我也相信这一点。而且更重要的的，这位明智而节俭的陛下由于他已经取得的成就，对他给予了如此的信任，给他提供了良好的生活，就像梅塞尔·乔瓦尼自己告诉我的那样。人们说，不久以后他的陛下将为他准备一些船只，并把所有的罪犯送到那个国家建立一个殖民地，这样他们希望在伦敦建立一个比亚历山大港更大的香料仓库。企业员工主要由布里斯托尔人组成。他们是伟大的海员，现在他们知道要去哪里，他们说从伊比利亚离开后，到那里的航程不会超过十五天。我还和一个勃艮第人谈过，他是梅塞尔·乔瓦尼的同伴，他证实了这一切，并且希望回去，因为海军上将(梅塞尔·乔瓦尼的头衔)给了他一个岛屿，又给了他卡斯蒂奥内<sup><a href="#fn_7" id="reffn_7">7</a></sup>的理发师一座岛屿，他是一个热那亚人，他们都把自己当作伯爵，也不把自己的海军上将领主的地位看得比亲王低。我也相信有一些可怜的意大利修士要参加这次航行，他们都得到了主教职位的承诺。如果我在海军上将即将出航时和他交朋友，那我至少能得到一个大主教的职位。但我认为，阁下为我保留的利益会更有保障一些。我冒昧地祈求，如果在我不在的时候出现了空缺，请把职位交给我，不要让那些比我更勤奋的人来取代我。在这个国家，我每顿饭只能吃十种或十二种食物，每天在桌上待三小时，其中两个小时是出于对阁下的爱，我谦卑地向阁下毛遂自荐。</p><p>伦敦，1497年12月18日，阁下最谦卑的仆人，雷蒙德斯</p><blockquote id="fn_6"><sup>6</sup>. 出自《科学年鉴》，米兰，1866年；米兰国家档案馆，哈里斯在他的《乔瓦尼·卡博托》中再版，出自《关于德西莫尼》，经他的允许，将他的文章翻译为哈克路特学会的文章。<a href="#reffn_6" title="Jump back to footnote [6] in the text."> &#8617;</a></blockquote><blockquote id="fn_7"><sup>7</sup>. 可能是基亚瓦里附近的卡斯蒂奥内。<a href="#reffn_7" title="Jump back to footnote [7] in the text."> &#8617;</a></blockquote><blockquote id="fn_1"><sup>1</sup>. 乔瓦尼·卡博托(英语:John Cabot,威尼斯语:Zuan Chabotto)，下文统一译作“乔瓦尼·卡博托”。 ——译者注<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote>]]></content>
    
    
    <summary type="html">关于乔瓦尼·卡博托(1450-1499)的三份纪录，原文https://sourcebooks.fordham.edu/mod/1497cabot-3docs.asp</summary>
    
    
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="现代史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E7%8E%B0%E4%BB%A3%E5%8F%B2/"/>
    
    <category term="北美殖民地" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E7%8E%B0%E4%BB%A3%E5%8F%B2/%E5%8C%97%E7%BE%8E%E6%AE%96%E6%B0%91%E5%9C%B0/"/>
    
    <category term="早期征服与剥削" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E7%8E%B0%E4%BB%A3%E5%8F%B2/%E5%8C%97%E7%BE%8E%E6%AE%96%E6%B0%91%E5%9C%B0/%E6%97%A9%E6%9C%9F%E5%BE%81%E6%9C%8D%E4%B8%8E%E5%89%A5%E5%89%8A/"/>
    
    
    <category term="渣翻" scheme="https://hiedanoajuu.github.io/tags/%E6%B8%A3%E7%BF%BB/"/>
    
    <category term="北美" scheme="https://hiedanoajuu.github.io/tags/%E5%8C%97%E7%BE%8E/"/>
    
    <category term="殖民" scheme="https://hiedanoajuu.github.io/tags/%E6%AE%96%E6%B0%91/"/>
    
  </entry>
  
  <entry>
    <title>全新世</title>
    <link href="https://hiedanoajuu.github.io/2023/11/19/Holocene/"/>
    <id>https://hiedanoajuu.github.io/2023/11/19/Holocene/</id>
    <published>2023-11-19T01:23:46.000Z</published>
    <updated>2024-08-07T15:35:30.753Z</updated>
    
    <content type="html"><![CDATA[<p>返回<a href="https://hiedanoajuu.github.io/2023/09/09/Geologic-time-scale/">地质年代表</a>：<a href="https://hiedanoajuu.github.io/2023/10/14/Cenozoic/">新生代</a></p><p>要观察全新世的环境，只需环顾四周！全新世指的是地球最近11,700年<sup><a href="#fn_*" id="reffn_*">*</a></sup>的历史，也就是自上一个大冰河期(亦称“冰河时代”)结束以来的时间。从那以后，气候也常发生一些小规模的变化——尤其是约公元1200年至1700年间的“小冰河期”）——但总的来说，全新世是冰河时代之间相对温暖的一个时期。</p><p><img src="adirondacks.jpg" alt="阿迪朗达克山脉" title="阿迪朗达克山脉"></p><p>全新世有时也被称作人类世，即“人类的时代”。这很容易造成误导：我们所属的人类亚种，<em>智人</em>，在全新世开始之前就已经开始进化并分散到世界各地了。然而全新世见证了人类所有有记载的历史以及所有文明的盛衰兴亡。人类极大影响了全新世的环境；虽然所有生物都在一定程度上影响着它们的环境，但还从来没有哪个物种像我们这个物种这么多、这么快地改变着整个地球。绝大多数科学家认为人类活动是“全球变暖”的罪魁祸首，即观测到的全球平均气温仍在持续上升。栖息地破坏、污染和其它因素正在导致动植物物种的持续大规模灭绝。根据一些预测，地球上20%的动植物物种将会在未来的25年内灭绝。</p><p>然而全新世也见证了人类知识与技术的巨大发展，这些知识和技术可以被用于——并且正在被用于——了解我们所看见的变化，预测它们的影响，并阻止抑或减轻它们可能对地球和我们造成的损害。古生物学家参与了了解全球变化的努力。由于许多化石提供了过去的气候与环境的数据，古生物学家正在帮助我们了解未来的环境变化将如何影响地球上的生命。</p><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><ul><li>从美国海洋及大气管理局的<a href="">全球变暖更新</a>上获得全球变暖的最新消息，或者研读美国国家航空航天局的<a href="">全球变化总目</a>。</li><li>在<a href="">古沼泽地质学期刊</a>或者<a href="">全新世期刊</a>上浏览全新世最新研究的摘要。</li><li>通过<a href="">第四纪研究协会</a>了解更多信息。</li></ul><blockquote id="fn_*"><sup>*</sup>. 确定年代来自国际地层委员会《国际地层图》，2009年。<a href="#reffn_*" title="Jump back to footnote [*] in the text."> &#8617;</a></blockquote>]]></content>
    
    
    <summary type="html">全新世，翻译自 https://ucmp.berkeley.edu/quaternary/holocene.php</summary>
    
    
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="古代史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/"/>
    
    <category term="人类起源" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E4%BA%BA%E7%B1%BB%E8%B5%B7%E6%BA%90/"/>
    
    <category term="地质年代" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E4%BA%BA%E7%B1%BB%E8%B5%B7%E6%BA%90/%E5%9C%B0%E8%B4%A8%E5%B9%B4%E4%BB%A3/"/>
    
    
    <category term="渣翻" scheme="https://hiedanoajuu.github.io/tags/%E6%B8%A3%E7%BF%BB/"/>
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="地理" scheme="https://hiedanoajuu.github.io/tags/%E5%9C%B0%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>板块构造学</title>
    <link href="https://hiedanoajuu.github.io/2023/11/04/Plate-tectonics/"/>
    <id>https://hiedanoajuu.github.io/2023/11/04/Plate-tectonics/</id>
    <published>2023-11-04T15:15:33.000Z</published>
    <updated>2024-08-07T15:35:30.755Z</updated>
    
    <content type="html"><![CDATA[<p>返回<a href="https://hiedanoajuu.github.io/2023/09/09/Geologic-time-scale/">地质年代表</a></p><p>20世纪40年代和50年代的地球科学的进步和技术的进步与对地球的理解紧密相关，这使地质学家们逐渐形成了一种观察世界及其运行方式的新方法。我们提供了关于我们认识地球的历程的一些信息，并简要概述了它背后的理论。</p><h1 id="学说的历史"><a href="#学说的历史" class="headerlink" title="学说的历史"></a>学说的历史</h1><p>仔细观察地球往往会发现，大多数大陆似乎可以像拼图一样拼在一起：西非海岸线似乎可以与南美洲东海岸和加勒比海紧密贴合;太平洋的两岸也出现了类似的情况。如果将水下大陆架而非海岸线进行比较，这种契合就更加引人注目了。1912年，阿尔弗雷德·魏格纳（1880-1930）也注意到了这一点并且提出了地球上的所有大陆曾经被挤压为一个单独的原始大陆，他称之为“盘古大陆”（意为“所有土地”）。随着时间的推移，它们漂移开来，形成如今的分布。他相信，盘古大陆在大约3亿年前的<a href="">石炭纪</a>晚期开始解体并漂移开来之前都是完整的。但是，魏格纳的假说缺乏一种地质机制以解释大陆如何像他所提出的那样漂过地球的表面。</p><p>为了进一步发展他的大陆漂移学说，魏格纳在搜索证据的过程中遇到了一篇古生物学论文。这篇论文提出，一条陆桥曾经连接着非洲与巴西。这条陆桥试图解释著名的古生物学发现，即在南美洲和非洲发现了同一时期的相同的植物和动物化石。在欧洲和北美洲、马达加斯加和印度发现的化石也是如此。其中的许多生物并不能跨越现存的浩瀚的海洋。魏格纳的大陆漂移学说似乎比连接所有大陆的陆桥更为可信。但这本身并不足以支撑他的观点。另一个支持大陆漂移学说的发现是宾夕法尼亚世大陆冰川作用的证据。冰川的刮擦在陆地表面上留下的痕迹表明非洲与南美洲在那个古老的冰河时代就曾紧密贴合。相同的刮擦图案可以沿南美洲和非洲南部的海岸发现。</p><p>魏格纳的大陆漂移假说提供了山脉的形成（造山运动）的另一种解释。他当时讨论的理论是“收缩理论”，该理论认为，地球曾经是一个熔融的球，在冷却过程中，表面炸裂并折叠起来。这个想法的一个大问题是，所有的山脉的年龄都应该大致相同，但这显然是不正确的。魏格纳的解释是，随着大陆的移动，大陆的前缘会遇到阻力，因此遭到挤压并向上折叠，在漂移大陆的前缘附近形成山脉。他引用了北美洲太平洋海岸的内华达山脉和南美洲海岸的安第斯山脉。魏格纳也提出，印度次大陆向北漂移与亚洲大陆发生碰撞从而形成了喜马拉雅山脉。</p><p>魏格纳最终提出了一种大陆漂移的机制，主要集中在他的论断上，即地球自转产生了一种向赤道的离心力。他相信盘古大陆在南极附近形成，并且地球的离心力导致这块原始大陆四分五裂，由此形成的大陆漂向赤道。他称之为“离极力”。这一观点很快遭到了科学界的普遍反对，因为据计算，地球自转产生的力实际上不足以移动大陆。魏格纳也尝试用太阳与月球的引力解释美洲的向西漂移，但这种观点很快也遭到了反对。魏格纳无法对引起大陆漂移的力作出充分的解释，而且当时的人们普遍认为地球是坚固不变、无法移动的，这使得他的理论在遭到了科学界的否定。</p><p>1929年，大约在魏格纳的观点开始被否定的时候，阿瑟·霍姆斯详细阐述了魏格纳的许多假说中的一个；地幔对流说。这种观点基于这样一个事实:液体被加热时，其密度将会降低 —— 这些密度较低的液体上升到表面，等到冷却后再次下沉。这种反复的加热和冷却会产生一股足以使大陆移动的对流。阿瑟·霍姆斯认为，这种热对流就像一条传送带，上升流的压力可以使一个大陆分裂，然后在对流的携带下迫使破碎的大陆向相反的方向移动。这种热对流就像是一条传送带，上升流的压强可以使一个大陆四分五裂，然后迫使破碎的大陆在对流的作用下向相反的方向移动。这种观点在当时并没有受到多少关注。</p><p>直到20世纪60年代，霍姆斯的想法才得到重视。对海底更深入的了解，以及洋中脊、平行于洋中脊的地磁异常、以及岛弧和海沟同时出现在陆缘附近等发现，表明对流可能确实起到了作用。这些以及其它更多的发现促使哈里·赫斯(1962)和R·戴茨(1961)发表了基于地幔对流说的类似假设，现在被称为“海底扩张”。这一观点与霍姆斯在30多年前提出的观点基本一致，但现在已经有了更多的证据来支撑并进一步发展这一观点。</p><h1 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h1><p>板块构造的主要特征有：</p><ul><li>地球的表面覆盖着一系列的地壳板块；</li><li>海底在不断地移动，从中心向外扩张，在边缘下沉，然后重新形成；</li><li>板块下方的对流使地壳板块向不同的方向移动；</li><li>驱动对流的热源是地幔深处的放射性物质；</li></ul><p>二战期间声波深度记录的进步以及随后的核共振式磁强计（质子进动磁强计）的研发带来了对海底的精细测绘，并且随之而来的许多观测结果，使得霍华德·赫斯和R·戴茨等科学家重新提出了霍姆斯的对流学说。赫斯和戴茨极大修改了这一学说，并且将这一新学说称为“海底扩张”。海底特征中支撑海底扩张假说的有：洋中脊、深海沟、岛弧、地磁图案以及断层型式。</p><h2 id="洋中脊"><a href="#洋中脊" class="headerlink" title="洋中脊"></a>洋中脊</h2><p>洋中脊从海底升起3000米，宽度超过2000公里，在规模上超过了喜马拉雅山脉。海底测绘同样显示，这些巨型水下山脉有一条深沟，将山脊的长度一分为二，有些地方深达2000米。20世纪60年代早期对洋底热流的研究表明最大的热流集中于这些洋中脊的顶部。地震研究表明，洋中脊经历了更多地震。所有这些观测结果都表明，洋中脊处存在着剧烈的地质活动。</p><p><img src="mag_anom.gif" alt="洋中脊示意图" title="洋中脊示意图"></p><h2 id="地磁异常"><a href="#地磁异常" class="headerlink" title="地磁异常"></a>地磁异常</h2><p>偶尔，以随机的间隔，地球的磁场会反转。自岩浆形成的新岩石记录了岩浆冷却时地球磁场的方向。利用磁强计对海底进行的研究揭示了平行于洋中脊的交变磁化“条纹”。这是山脊上新岩石不断形成的证据。随着更多岩石的形成，较老的岩石被推得离山脊更远，在山脊的两侧产生对称的条纹。在上方的的图表中，深色条纹代表在两极方向“反转”时生成的海底，而浅色条纹代表如今的两极方向。请注意，代表洋中脊的线条两侧的图案是彼此的镜像。阴影条纹也代表越来越远离洋中脊的越来越老的岩石。地质学家已经确定在地球的不同地方发现的年龄相仿的岩石拥有相同的磁性。</p><h2 id="深海沟"><a href="#深海沟" class="headerlink" title="深海沟"></a>深海沟</h2><p>岛链遍布大洋，特别是太平洋西缘：阿留申群岛、千岛群岛、日本群岛、琉球群岛、菲律宾群岛、马里亚纳群岛、马来群岛、所罗门群岛、新赫布里底群岛、汤加群岛就是一些例子。这些“岛弧”总是沿深海沟分布，并且位于海沟的大陆一侧。</p><p><img src="seafloor2.gif" alt="海底" title="海底"></p><p>这些观测结果和其它关于地球的研究一起支撑了这样一个理论，即地壳（岩石圈：一层固态的板块）下方有一道可塑熔岩层的理论。可塑熔岩层也被称为软流圈，它被如铀、钍、钾等放射性元素的衰变所加热。因为放射性热源深入地幔，所以液态软流圈在固态岩石圈下方对流循环。这个加热层就是我们在火山爆发时所看到的岩浆的来源，也是驱动温泉和间歇泉的热源，还是将洋中脊向上推动并且形成新的海底的原材料来源。岩浆源源不断地在洋中脊向上喷涌，产生了方向相反的岩浆流，并因此形成了在洋中脊将海底拉开的力。随着海底扩散开来，裂缝出现在山脊中间，使得熔岩通过裂缝浮出水面，形成新的海底。随着海底逐渐远离洋中脊，它最终将和大陆板块接触，并且将会潜没入大陆的下方。最终，岩石圈将会被推入软流圈，在那里它将再次处于被加热的状态。</p><h1 id="继续探索地质年代："><a href="#继续探索地质年代：" class="headerlink" title="继续探索地质年代："></a>继续探索地质年代：</h1><ul><li>在<a href="">克里斯托弗·斯科泰塞的Paleomap项目</a>网站上观看演示板块构造在整个地质时期中是如何重新排列大陆的动画；</li><li>探索其它感兴趣的<a href="https://hiedanoajuu.github.io/2023/09/09/Geologic-time-scale/">地质时期</a>；</li><li>了解<a href="(https://hiedanoajuu.github.io/2023/10/28/About-Geologic-time-scale/">地质年代划分的发展历程</a></li></ul><blockquote><p>*.确定年代来自国际地层委员会《国际地层图》，2009年。</p></blockquote>]]></content>
    
    
    <summary type="html">板块构造学，翻译自 https://ucmp.berkeley.edu/geology/tectonics.php</summary>
    
    
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="古代史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/"/>
    
    <category term="人类起源" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E4%BA%BA%E7%B1%BB%E8%B5%B7%E6%BA%90/"/>
    
    <category term="地质年代" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E4%BA%BA%E7%B1%BB%E8%B5%B7%E6%BA%90/%E5%9C%B0%E8%B4%A8%E5%B9%B4%E4%BB%A3/"/>
    
    
    <category term="渣翻" scheme="https://hiedanoajuu.github.io/tags/%E6%B8%A3%E7%BF%BB/"/>
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="地理" scheme="https://hiedanoajuu.github.io/tags/%E5%9C%B0%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>关于地质年代</title>
    <link href="https://hiedanoajuu.github.io/2023/10/28/About-Geologic-time-scale/"/>
    <id>https://hiedanoajuu.github.io/2023/10/28/About-Geologic-time-scale/</id>
    <published>2023-10-28T00:19:31.000Z</published>
    <updated>2023-12-23T15:27:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="地质年代划分的起源"><a href="#地质年代划分的起源" class="headerlink" title="地质年代划分的起源"></a>地质年代划分的起源</h1><p>第一批需要了解不同岩石单位的地质关系的人是矿工。至少自罗马时代开始，采矿就具有商业利益，但直到16世纪和17世纪，他们努力才引起了人们对于各地岩石关系的兴趣。</p><p>1669年，尼古劳斯·斯泰诺通过注意不同岩石单位之间的关系，描述了两个基本的地质学原理。第一个原理是沉积岩是水平排列的，第二个原理是较年轻的岩石单位沉积在较老的岩石单位之上。关于后一个原理，则可以想象一下墙上的油漆层。最老的一层先被涂上，被掩在底部，而最新的一层在顶部。1795年，詹姆斯·赫顿提出了另一个概念，后来在19世纪初，查尔斯·赖尔强调了这一概念。该理论认为在整个历史过程中，自然地质过程在频率和规模上是一致的，这种理论也被称作“均变论原理”。</p><center class = "half"><img src = "paintedhills.jpg"  width = "50%" align = left><img src = "cedarbreaks.jpg"  width = "50%" align = right></center><center>在俄勒冈州约翰·戴化石床国家纪念碑的彩绘山和犹他州的锡达·布雷克斯国家公园被精美展出的水平岩层。</center><p>斯泰诺提出的原理使17世纪和18世纪初的工人们开始认识到岩石的序列。然而，由于岩石是通过颜色、质地甚至气味来描述的，所以比较不同地区的岩石序列往往是不可能的。化石为工人们地理上不同的地区之间建立联系提供了机会。因为化石被发现覆盖了地壳的广大区域，所以这是很有可能的。</p><p>下一个对地质年代做出重大贡献的是英国测量员、运河工程师、业余地质学家威廉·史密斯。1815年，史密斯绘制了一幅英格兰地质图，成功证明了化石层序律。这个原理简单来说，化石在岩石被发现的顺序非常明确。这一原理指引了其他人研究如何使用化石来定义相对时间尺度内的增量。</p><h1 id="关于地质年代的划分"><a href="#关于地质年代的划分" class="headerlink" title="关于地质年代的划分"></a>关于地质年代的划分</h1><p>地球的地质历史被分解成分层次的时间块。从大到小，这个层次结构包括宙、代、纪、世和期。所有这些都显示在如下所示的地质年代表的一部分中。</p><table cellpadding="6" cellspacing="0" border="1" align="center">    <tbody><tr align="center">        <td>宙</td>        <td>代</td>        <td>纪</td>        <td>世</td>        <td>期</td>    </tr>    <tr align="center">        <td bgcolor="#9ad9dd" rowspan="2">显生宙</td>        <td bgcolor="#f2f91d" rowspan="2">新生代</td>        <td bgcolor="#fd9a52" rowspan="2">古近纪</td>        <td bgcolor="#fdc07a" rowspan="2">渐新世</td>        <td bgcolor="#fee6aa">恰特期</td>    </tr>    <tr align="center">        <td bgcolor="#fed99a">鲁培勒期</td>    </tr></tbody></table><p>显生宙代表了大多数宏观生物——藻类、真菌、植物和动物——生活的时期。当第一次提出这一地质年代的划分时，人们认为显生宙的开始(5.42亿年前)与生命的起源相吻合。实际上，这一时期与进化出外骨骼(如贝壳)的动物和稍晚一些的形成内骨骼(如脊椎动物的骨骼)的动物的出现是一致的。显生宙之前的时代通常被称为前寒武纪，通常被分为图中所示的三个宙。</p><p>显生宙(Phanerozoic)被细分为三个主要板块:新生代(Cenozoic)、中生代(Mesozoic)和古生代(Paleozoic)。“-zoic”后缀来自词根“zoo”，意思是动物。这个词根与“动物学”(Zoology)和动物园(Zoological park或Zoo)中的词根相同。“Cen-”意思是“最近”，“Meso-”意思是“中间”，而“Paleo-”意思是“古代”。这些划分反映了古代动物群的组成的重大变化，每个时代都由一群特定的动物统治。新生代有时被称为“哺乳动物时代”，中生代则被称为“恐龙时代”，古生代被称为“鱼类时代”。但这是一种过于简化的观点，对初学者而言具有一定的价值，但可能会造成一些误导。例如，还有其他动物群生活在中生代。除了恐龙，哺乳动物、海龟、鳄鱼、青蛙和无数种类的昆虫也生活在陆地上。此外，有许多过去生活的植物现在已经不复存在了。古代植物群也经历了巨大的变化，但并不总是与动物群的变化同时发生。</p><h1 id="参考资料及资源"><a href="#参考资料及资源" class="headerlink" title="参考资料及资源"></a>参考资料及资源</h1><ul><li>W·B·N·贝里，《史前年代划分的发展：基于有机演化》修订版，布莱克韦尔科学出版社，帕洛阿尔托，202页。</li><li>参见加州大学古生物学院的教育模块“<a href="https://ucmp.berkeley.edu/education/explorations/tours/geotime/index.html">理解地质时间</a>”。</li><li>访问帕梅拉·J·W·戈尔历史的地质学课程的优秀<a href="http://facstaff.gpc.edu/~pgore/geology/historical_lecture/historical_outline.php">在线笔记</a>.</li></ul>]]></content>
    
    
    <summary type="html">关于地质年代，翻译自 https://ucmp.berkeley.edu/exhibit/histgeoscale.php</summary>
    
    
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="古代史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/"/>
    
    <category term="人类起源" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E4%BA%BA%E7%B1%BB%E8%B5%B7%E6%BA%90/"/>
    
    <category term="地质年代" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E4%BA%BA%E7%B1%BB%E8%B5%B7%E6%BA%90/%E5%9C%B0%E8%B4%A8%E5%B9%B4%E4%BB%A3/"/>
    
    
    <category term="渣翻" scheme="https://hiedanoajuu.github.io/tags/%E6%B8%A3%E7%BF%BB/"/>
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="地理" scheme="https://hiedanoajuu.github.io/tags/%E5%9C%B0%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>太古宙与冥古宙</title>
    <link href="https://hiedanoajuu.github.io/2023/10/21/Archean-Hadean/"/>
    <id>https://hiedanoajuu.github.io/2023/10/21/Archean-Hadean/</id>
    <published>2023-10-20T23:27:42.000Z</published>
    <updated>2024-08-07T15:35:30.752Z</updated>
    
    <content type="html"><![CDATA[<p>返回<a href="https://hiedanoajuu.github.io/2023/09/09/Geologic-time-scale/">地质年代表</a></p><h1 id="太古宙"><a href="#太古宙" class="headerlink" title="太古宙"></a>太古宙</h1><p>太古宙在元古宙之前，跨度约15亿年，分为新太古代(28-25亿年前)、中太古代(32-28亿年前)、古太古代(36-32亿年前)和始太古代(40-36亿年前)四个时代。<sup><a href="#fn_*" id="reffn_*">*</a></sup></p><p>如果你能够回到太古宙的地球，你可能并不会觉得它和我们今天居住地球是同一个星球。当时的大气与我们今天所呼吸的非常不同;当时的大气可能是由甲烷、氨气和其他对地球上今天的大多数生物来说都是有毒的气体所组成的还原气氛。同样在这段时间里，地壳冷却到足以形成岩石和大陆板块。</p><p>地球上最早的生命出现于太古宙早期。我们所发现的最古老的化石可以追溯至大约35亿年前，由细菌微体化石组成。事实上，在太古宙超过10亿年的时间里，所有的生物都是细菌。太古宙的海岸是叠层石这种堆积的光合细菌菌落的家园。叠层石作为化石被发现于在南非和澳大利亚西部的太古宙早期岩石中。叠层石的数量在整个太古宙大为增加，但在元古宙开始减少。它们在今天并不常见，但在澳大利亚的鲨鱼湾却生活得很好(见下图)。</p><p><img src="sharkbay.jpg" alt="鲨鱼湾" title="鲨鱼湾"></p><center>前加州大学古生物博物馆研究生艾伦·科林斯(左)和克里斯·迈耶站在澳大利亚最西端的鲨鱼湾的叠层石中。</center><h1 id="冥古宙"><a href="#冥古宙" class="headerlink" title="冥古宙"></a>冥古宙</h1><p>冥古宙(46亿到40亿年前)<sup><a href="#fn_*" id="reffn_*">*</a></sup>并不是一个地质时期。除了陨石，地球上没有任何岩石能够如此古老。冥古宙时期，太阳系可能正在太阳周围的一大片气体和尘埃云中形成，这种云被称为吸积盘。太阳系中相对丰富的重元素表明，这些气体和尘埃来自一颗或多颗超新星——一颗古老的大质量恒星的爆炸。重元素是在恒星内部由氢的核聚变产生的，在其他地方则并不常见。今天，我们仍可以看到类似的过程发生在所谓的弥漫星云和其他星系中，比如M16星云(见左下图)。</p><center class = "half"><img src = "m16.jpg"  width = "50%" align = left><img src = "ida.jpg"  width = "50%" align = right></center><center><b>左图</b>:哈勃空间望远镜拍摄的M16星云(鹰状星云)的恒星形成区域。<b>右图</b>:1993年伽利略号航天器拍摄的小行星艾达及其卫星。该航天器距离小行星约10,500公里(6,500英里)。</center><p>太阳是在这样一团气体和尘埃云中形成的，在引力的作用下不断收缩，直到它开始进行核聚变并放出光和热。周围的粒子开始在重力作用下聚合成更大的团块，或称星子，这些星子继续聚集成行星。“剩下的”物质则形成了小行星和彗星，如右上图的小行星艾达。</p><p>由于大型星子之间的碰撞会释放出大量的热量，地球和其他行星在它们的历史开始之时可能是熔融的。当地球冷却时，熔融物凝固成岩石。最古老的陨石和月球岩石大约有45亿年的历史，但目前已知的最古老的地球岩石只有38亿年的历史。在地球历史的最初8亿年左右的某个时候，地球表面从液体变成了固体。当地球上形成固体岩石的时候，它的地质历史也就随之开始了。这很可能发生在38亿年前，但缺乏确凿的证据。侵蚀与板块构造很可能已经摧毁了所有年龄超过38亿年的固体岩石。岩石记录的出现大致标志着太古宙的开始。</p><h1 id="资源及参考资料"><a href="#资源及参考资料" class="headerlink" title="资源及参考资料"></a>资源及参考资料</h1><ul><li>S·本特松(主编)，1994年，《地球上的早期生命》，诺贝尔研讨会编号84，哥伦比亚大学出版社，纽约;</li><li>J·W·绍普夫(主编)，1983年，《地球最早的生物圈:起源与演化》，普林斯顿大学出版社，普林斯顿，543页;</li><li>在维基百科上阅读更多关于<a href="https://zh.wikipedia.org/wiki/%E9%AF%8A%E9%AD%9A%E7%81%A3">鲨鱼湾及其叠层石</a>以及<a href="https://zh.wikipedia.org/wiki/%E7%96%8A%E5%B1%A4%E7%9F%B3">叠层石</a>的信息;  </li><li>在维基百科上学习更多关于<a href="https://zh.wikipedia.org/wiki/%E5%A4%AA%E5%8F%A4%E5%AE%99">太古宙</a>和<a href="https://zh.wikipedia.org/wiki/%E5%86%A5%E5%8F%A4%E5%AE%99">冥古宙</a>的内容;</li><li>在<a href="http://www.paleoportal.org/index.php?globalnav=time_space&amp;sectionnav=period&amp;period_id=17">古生物学门户</a>网站上了解更多关于北美前寒武纪古生物学和地质学的信息。</li></ul><blockquote id="fn_*"><sup>*</sup>. 确定年代来自国际地层委员会《国际地层图》，2009年。<a href="#reffn_*" title="Jump back to footnote [*] in the text."> &#8617;</a></blockquote>]]></content>
    
    
    <summary type="html">太古宙与冥古宙，翻译自 https://ucmp.berkeley.edu/precambrian/archean_hadean.php</summary>
    
    
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="古代史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/"/>
    
    <category term="人类起源" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E4%BA%BA%E7%B1%BB%E8%B5%B7%E6%BA%90/"/>
    
    <category term="地质年代" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E4%BA%BA%E7%B1%BB%E8%B5%B7%E6%BA%90/%E5%9C%B0%E8%B4%A8%E5%B9%B4%E4%BB%A3/"/>
    
    
    <category term="渣翻" scheme="https://hiedanoajuu.github.io/tags/%E6%B8%A3%E7%BF%BB/"/>
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="地理" scheme="https://hiedanoajuu.github.io/tags/%E5%9C%B0%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>新生代</title>
    <link href="https://hiedanoajuu.github.io/2023/10/14/Cenozoic/"/>
    <id>https://hiedanoajuu.github.io/2023/10/14/Cenozoic/</id>
    <published>2023-10-14T00:13:32.000Z</published>
    <updated>2024-08-07T15:35:30.755Z</updated>
    
    <content type="html"><![CDATA[<p>返回<a href="https://hiedanoajuu.github.io/2023/09/09/Geologic-time-scale/">地质年代表</a></p><p>新生代是动物的历史中的三个主要时期中距今最近的一个。另外两个则是<a href="">古生代</a>和<a href="">中生代</a>。新生代的跨度只有6500万年，从白垩纪末期非鸟类<a href="">恐龙</a>大灭绝至今。新生代有时也被称作哺乳动物时代。因为在那个时期，最大的陆地动物都是哺乳动物。这种说法是不大合适的。首先，哺乳动物的历史早在新生代之前就开始了。其次，新生代的生物多样性远不止包括哺乳动物。新生代也可以被准确地称为“开花植物时代”、“昆虫时代”、“硬骨鱼时代”或者“鸟类时代”。</p><p>新生代(6550万年前至今)分为三个时期:古近纪(6550至2303万年前)、新近纪(2303至260万年前)和第四纪260万前年至今)。古近纪和新近纪是相对较新的术语，取代了已被弃用的术语——第三纪。古近系可分为古新世(6550至5580万年前)、始新世(5580至3390万年前)、渐新世(3390至2303万年前)三个时期。新近纪可分为中新世(2303至533.2万年前)和上新世(距今5332至258.8万年前)两个时期<sup><a href="#fn_*" id="reffn_*">*</a></sup>。</p><h1 id="地层学"><a href="#地层学" class="headerlink" title="地层学"></a>地层学</h1><p>第三纪和第四纪的概念有着有趣的历史。在18世纪60年代和70年代，一位名叫乔瓦尼·阿尔杜伊诺的地质学家正在研究托斯卡纳的岩石和矿物。他根据在山中发现的岩石类型对山进行分类。无化石的片岩、花岗岩和玄武岩(都是火山岩)，构成了他称之为“原始”的大山的核心。在“原始”岩石之上的山脉两侧发现的富含化石的石灰岩和粘土的岩石被称为“次生”岩石。最后，还有另一组含化石的石灰岩和砂岩的岩石位于“次生”岩石之上，形成了阿尔杜伊诺称之为“第三纪”的山脉的山麓小丘。因此最初，第三纪指的是在托斯卡纳地区发现的某种岩石。但后来，地质学家利用在那里的第三纪岩石中发现的化石来识别其他地方相同年代的岩石。具有相同种类化石的岩石具有相同的年代。</p><p><img src="paris_basin.gif" alt="巴黎盆地" title="巴黎盆地"></p><p>在法国巴黎周围的巴黎盆地发现了大量第三纪岩石。在19世纪20年代和30年代，对查尔斯·达尔文有重大影响的著名英国地质学家查尔斯·赖尔依据所含的化石对巴黎盆地的第三纪岩石进行了细分。赖尔想出了一个绝妙的主意。他注意到，该部分顶部的岩石中有很大比例为现存软体动物的化石。而底部的那些化石中几乎没有任何现存的生物。他推断，这种差异是由于在岩石沉积的时期古老物种的灭绝和现存物种的进化。他将第三纪岩石划分为三个亚代:上新世、中新世和始新世。上新世岩石所含的化石中90%的软体动物至今仍然存在。中新世岩石中只有18%的软体动物是延续至今，始新世岩石中只有9.5%。</p><p>这些对于第三纪的细分已在世界范围内利用其所含化石的物种进行了关联。与赖尔的始新世岩石相同种类的岩石被认为与巴黎盆地的岩石属于同一时代。其余细分类型也是如此。过了一段时间，人们注意到，在巴黎盆地以外的地区，有些岩石似乎来自赖尔的序列中没有提及的时期。这是因为在这些时期，后来成为巴黎盆地的地方没有沉积。这两个时期后来被称为渐新世和古新世，被插入到第三纪的适当位置。</p><h1 id="新生代化石位置"><a href="#新生代化石位置" class="headerlink" title="新生代化石位置"></a>新生代化石位置</h1><ul><li><a href="">印度尼西亚博琼组</a>：这个上新世地区的许多深水软体动物给我们描绘了过去热带海洋生物的画面，今天这里依然是一个物种丰富的地区。</li><li><a href="">克里德组</a>：来自科罗拉多州西南部的渐新世地区的丰富植物群落，包括松树、冷杉、伏牛花和各种其他物种，都保存完好。</li><li><a href="">绿河组</a>：富含植物、昆虫和鱼类化石，这个始新世地区横跨美国西部的犹他州、科罗拉多州和怀俄明州。</li><li><a href="">拉布雷亚沥青坑</a>：拉布雷亚沥青坑是最著名的化石发现地之一，位于加利福尼亚州洛杉矶，是一个含有更新世化石的沥青坑。</li><li><a href="">蒙特雷组</a>：沿着加利福尼亚海岸山脉的广大中新世露头区。化石包括大型藻类、微体化石、贝壳、螃蟹和鼠海豚。</li><li><a href="">哥伦比亚比利亚维耶哈组</a>：目前为止，我们关于南美洲热带地区第三纪动物的唯一良好信息来源是哥伦比亚的这个地点。许多上新世以前的动物群在大陆以外的任何地方都找不到。</li></ul><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><ul><li>有关其他新生代地区的信息，请参阅<a href="">始新世</a>、<a href="">渐新世</a>和<a href="">中新世</a>页面。</li><li>参观一下世界上最大的古生物研究所——<a href="https://ucmp.berkeley.edu/pin/pin.html">俄罗斯古生物研究所</a>，那里有许多来自俄罗斯的新生代哺乳动物。</li><li><a href="https://ucmp.berkeley.edu/neomap/">NEOMAP</a> - MIOMAP和FAUNMAP的数据库现在已经连接起来，提供了所有在美国发表的晚渐新世到全新世哺乳动物的数据。</li><li>在<a href="http://www.paleoportal.org/index.php?globalnav=time_space&amp;sectionnav=period&amp;period_id=8">古生物学门户</a>网站上了解更多关于北美新生代古生物学和地质学的信息。</li></ul><blockquote id="fn_*"><sup>*</sup>. 确定年代来自国际地层委员会《国际地层图》，2009年。<a href="#reffn_*" title="Jump back to footnote [*] in the text."> &#8617;</a></blockquote>]]></content>
    
    
    <summary type="html">新生代，翻译自 https://ucmp.berkeley.edu/cenozoic/cenozoic.php</summary>
    
    
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="古代史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/"/>
    
    <category term="人类起源" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E4%BA%BA%E7%B1%BB%E8%B5%B7%E6%BA%90/"/>
    
    <category term="地质年代" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E4%BA%BA%E7%B1%BB%E8%B5%B7%E6%BA%90/%E5%9C%B0%E8%B4%A8%E5%B9%B4%E4%BB%A3/"/>
    
    
    <category term="渣翻" scheme="https://hiedanoajuu.github.io/tags/%E6%B8%A3%E7%BF%BB/"/>
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="地理" scheme="https://hiedanoajuu.github.io/tags/%E5%9C%B0%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>地质年代表</title>
    <link href="https://hiedanoajuu.github.io/2023/09/09/Geologic-time-scale/"/>
    <id>https://hiedanoajuu.github.io/2023/09/09/Geologic-time-scale/</id>
    <published>2023-09-09T09:21:31.000Z</published>
    <updated>2024-08-07T15:35:30.752Z</updated>
    
    <content type="html"><![CDATA[<p>来一次穿越地球历史的旅行吧-使用下面的年代表穿越到一个特定的时期，并调查古代的生命、气候以及地质。您可能会希望从<a href="https://hiedanoajuu.github.io/2023/10/14/Cenozoic/">新生代</a>(6550万年前至今)开始，然后回到过去；或者从<a href="https://hiedanoajuu.github.io/2023/10/21/Archean-Hadean/#冥古宙">冥古宙</a>(46亿到40亿年前)<sup><a href="#fn_*" id="reffn_*">*</a></sup>开始，然后向前旅行，直到现在——这取决于你。</p><p>开始探索的方法:</p><ul><li>点击下方“时光机”中的链接，探索你感兴趣的特定时期；</li><li>阅读<a href="https://hiedanoajuu.github.io/2023/10/28/About-Geologic-time-scale/">关于地质年代划分</a>的更多内容，了解它的起源以及它的年代划分；</li><li>了解关于<a href="https://hiedanoajuu.github.io/2023/11/04/Plate-tectonics/">板块构造学</a>的更多内容，这是一个在任何时期都非常重要的地质概念!</li></ul><table border="1" cellspacing="0">    <tr>        <td rowspan = 12 style="background-color:#9ad9dd">显生宙<br/>(5.42亿年前至今)</td>        <td rowspan = 3 style="background-color:#f2f91d"><a href="https://hiedanoajuu.github.io/2023/10/14/Cenozoic/">新生代</a><br/>(6550万年前至今)</td>        <td style="background-color:#f9f97f">第四纪 (258.8万年前至今)            <ul class="none">                <li><a href="https://hiedanoajuu.github.io/2023/11/19/Holocene/">全新世</a> (11,700年前至今)</li>                <li><a>更新世</a> (258.8万至11,700年前)</li>            </ul>        </td>    </tr>    <tr>        <td style="background-color:#ffe619">新近纪 (2303至258.8万年前)            <ul class="none">                <li><a>上新世</a> (533.2至258.8万年前)</li>                <li><a>中新世</a> (2303至533.2万年前)</li>            </ul>        </td>    </tr>    <tr>        <td style="background-color:#fd9a52">古近纪 (6550至2303万年前)            <ul class="none">                <li><a>渐新世</a> (3390至2303万年前)</li>                <li><a>始新世</a> (5580至3390万年前)</li>                <li><a>古新世</a> (6550至5580万年前)</li>            </ul>        </td>    </tr>    <tr>        <td rowspan = 3 style="background-color:#67c5ca"><a>中生代</a><br/>(2.51亿至6550万年前)</td>        <td style="background-color:#7fc64e"><a>白垩纪</a> (1.455亿至6550万年前)            <ul class="none">                <li>上白垩世 (9960至6550万年前)</li>                <li>下白垩世 (1.455亿至9960万年前)</li>            </ul>        </td>    </tr>    <tr>        <td style="background-color:#34b2c9"><a>侏罗纪</a> (1.996至1.455亿年前)            <ul class="none">                <li>上侏罗世 (1.612至1.455亿年前)</li>                <li>中侏罗世 (1.756至1.612亿年前)</li>                <li>下侏罗世 (1.996至1.756亿年前)</li>            </ul>        </td>    </tr>    <tr>        <td style="background-color:#812b92"><font color="white"><a><font color="white">三叠纪</font></a> (2.51至1.996亿年前)</font>            <ul class="none">                <li><font color="white">上三叠世 (2.287至1.996亿年前)</font></li>                <li><font color="white">中三叠世 (2.459至2.287亿年前)</font></li>                <li><font color="white">下三叠世 (2.51至2.459亿年前)</font></li>            </ul>        </td>    </tr>    <tr>        <td rowspan = 6 style="background-color:#99c08d"><a>古生代</a><br/>(5.42至2.51亿年前)</td>        <td style="background-color:#f04028"><a>二叠纪</a> (2.99至2.51亿年前)            <ul class="none">                <li>乐平世 (2.604至2.51亿年前)</li>                <li>瓜德鲁普世 (2.706至2.604亿年前)</li>                <li>乌拉尔世 (2.99至2.706亿年)</li>            </ul>        </td>    </tr>    <tr>        <td style="background-color:#67a599"><a>石炭纪</a> (3.592至2.99亿年前)            <ul class="none">                <li>宾夕法尼亚世 (3.181至2.99亿年前)</li>                <ul class="none">                        <li>上宾夕法尼亚阶 (3.072至2.99亿年前)</li>                    <li>中宾夕法尼亚阶 (3.117至3.072亿年前)</li>                    <li>下宾夕法尼亚阶 (3.181至3.117亿年前)</li>                </ul>                <li>密西西比世 (3.592至3.181亿年前)</li>                <ul class="none">                        <li>上密西西比阶 (3.283至3.181亿年前)</li>                    <li>中密西西比阶 (3.453至3.283亿年前)</li>                    <li>下密西西比阶 (3.592至3.453亿年前)</li>                </ul>            </ul>        </td>    </tr>    <tr>        <td style="background-color:#cb8c37"><a>泥盆纪</a> (4.16至3.592亿年前)            <ul class="none">                <li>上泥盆世 (3.853至3.592亿年前)</li>                <li>中泥盆世 (3.975至3.853亿年前)</li>                <li>下泥盆世 (4.16至3.975亿年前)</li>            </ul>        </td>    </tr>    <tr>        <td style="background-color:#b3e1b6"><a>志留纪</a> (4.437至4.16亿年前)            <ul class="none">                <li>普里道利世 (4.187至4.16亿年前)</li>                <li>勒德洛世 (4.229至4.187亿年前)</li>                <li>文洛克世 (4.282至4.229亿年前)</li>                <li>兰多维利世 (4.437至4.282亿年前)</li>            </ul>        </td>    </tr>    <tr>        <td style="background-color:#009270"><a>奥陶纪</a> (4.883至4.437亿年前)            <ul class="none">                <li>上奥陶世 (4.609至4.437亿年前)</li>                <li>中奥陶世 (4.718至4.609亿年前)</li>                <li>下奥陶世 (4.883至4.718亿年前)</li>            </ul>        </td>    </tr>    <tr>        <td style="background-color:#7fa056"><a>寒武纪</a> (5.42至4.883亿年前)            <ul class="none">                <li>芙蓉世 (4.99至4.883亿年前)</li>                <li>第三世 (5.1至4.99亿年前)</li>                <li>第二世 (5.21至5.1亿年前)</li>                <li>地球新世 (5.42至5.21亿年前)</li>            </ul>        </td>    </tr>    <tr>        <td rowspan=8 style="background-color:#f16681">前寒武纪 (46至5.42亿年前)</td>        <td rowspan=3 style="background-color:#f74370"><a>元古宙</a><br/>(25至5.42亿年前)</td>        <td style="background-color:#feb342">新元古代 (10至5.42亿年前)</td>    </tr>    <tr>        <td style="background-color:#fdb462">中元古代 (16至10亿年前)</td>    </tr>    <tr>        <td style="background-color:#f74370">古元古代 (25至16亿年前)</td>    </tr>    <tr>        <td rowspan=4 style="background-color:#f0047f"><a href="https://hiedanoajuu.github.io/2023/10/21/Archean-Hadean/">太古宙</a><br/>(40至25亿年前)</td>        <td style="background-color:#f99bc1">新太古代 (28至25亿年前)</td>    </tr>    <tr>        <td style="background-color:#f768a9">中太古代 (32至28亿年前)</td>    </tr>    <tr>        <td style="background-color:#f4449f">古太古代 (36亿至32亿年前)</td>    </tr>    <tr>        <td style="background-color:#da037f">始太古代 (40至36亿年前)</td>    </tr>    <tr>        <td colspan=2 style="background-color:#ae027e"><center><a href="https://hiedanoajuu.github.io/2023/10/21/Archean-Hadean/#冥古宙"><font color="white">冥古宙</font></a><br/><font color="white">(46至40亿年前)</font></center></td>    </tr></table><blockquote id="fn_*"><sup>*</sup>. 确定年代来自<a href="http://www.stratigraphy.org/">国际地层委员会</a>《国际地层图》，2009年；颜色由<a href="http://ccgm.free.fr/index_gb.html">世界地质图委员会</a>采用，2011年5月26日。<a href="#reffn_*" title="Jump back to footnote [*] in the text."> &#8617;</a></blockquote>]]></content>
    
    
    <summary type="html">地质年代表，翻译自 https://ucmp.berkeley.edu/help/timeform.php</summary>
    
    
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="古代史" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/"/>
    
    <category term="人类起源" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E4%BA%BA%E7%B1%BB%E8%B5%B7%E6%BA%90/"/>
    
    <category term="地质年代" scheme="https://hiedanoajuu.github.io/categories/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E4%BA%BA%E7%B1%BB%E8%B5%B7%E6%BA%90/%E5%9C%B0%E8%B4%A8%E5%B9%B4%E4%BB%A3/"/>
    
    
    <category term="渣翻" scheme="https://hiedanoajuu.github.io/tags/%E6%B8%A3%E7%BF%BB/"/>
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="地理" scheme="https://hiedanoajuu.github.io/tags/%E5%9C%B0%E7%90%86/"/>
    
    <category term="图表" scheme="https://hiedanoajuu.github.io/tags/%E5%9B%BE%E8%A1%A8/"/>
    
  </entry>
  
</feed>
